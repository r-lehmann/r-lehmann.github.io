"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomData = void 0;
var _requester = require("../requester");
var _nonce = require("./nonce");
var _types = require("./types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * CustomData - a class for creating an instance for user's custom data
 * */
class CustomData extends _nonce.Nonce {
  /**
   * @param {number} index - an index of custom data to be stored under in a state, an index of custom data can be specified in `Advanced Tools` section of Kameleoon Application
   * @param {string[]} value - custom value to store under the specified id, value can be anything but has to be stringified to match the `string` type. *Note* value is variadic parameter and can be used as follows
   * @example
   * ```ts
   * // - Single value
   * const customData = new CustomData(0, 'value_1');
   * // - Variadic number of values
   * const customData = new CustomData(0, 'value_1', 'value_2', 'value_3');
   * // - Array of values
   * const values = ['value_1', 'value_2', 'value_3'];
   * const customData = new CustomData(0, ...values);
   * ```
   * */
  constructor(index, ...value) {
    super();
    _defineProperty(this, "index", void 0);
    _defineProperty(this, "value", void 0);
    this.index = index;
    this.value = value;
  }

  /**
   * @property url - url for the current data type used for events tracking
   * */
  get url() {
    const uniqueValues = [...new Set(this.value)];
    let resultValue = {};

    // --- Note ---
    // Final value should look like this `{ value_1: 1, value_2: 1, value_3: 1}`
    // With no duplicates
    uniqueValues.forEach(value => {
      resultValue[value] = 1;
    });
    if (!Object.keys(resultValue).length) {
      return '';
    }
    return _requester.UrlEventType.CustomData + _requester.UrlParameter.Index + this.index + _requester.UrlParameter.ValuesCountMap + encodeURIComponent(JSON.stringify(resultValue)) + _requester.UrlParameter.Overwrite + String(true) + _requester.UrlParameter.Nonce + this.nonce;
  }

  /**
   * @property data - data of the current class instance
   * */
  get data() {
    return {
      index: this.index,
      value: this.value,
      type: _types.KameleoonData.CustomData,
      nonce: this.nonce
    };
  }
}
exports.CustomData = CustomData;
//# sourceMappingURL=customData.js.map