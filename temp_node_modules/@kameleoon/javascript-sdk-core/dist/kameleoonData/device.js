"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Device = void 0;
var _requester = require("../requester");
var _nonce = require("./nonce");
var _types = require("./types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * Device - a class for creating an instance for device of a certain type
 * */
class Device extends _nonce.Nonce {
  /**
   * @param {DeviceType} device - one of the available device types from `DeviceType` enum
   * */
  constructor(device) {
    super();
    _defineProperty(this, "device", void 0);
    this.device = device;
  }

  /**
   * @property url - url for the current data type used for events tracking
   * */
  get url() {
    return _requester.UrlEventType.StaticData + _requester.UrlParameter.DeviceType + this.device + _requester.UrlParameter.Nonce + this.nonce;
  }

  /**
   * @property data - data of the current class instance
   * */
  get data() {
    return {
      device: this.device,
      type: _types.KameleoonData.Device,
      nonce: this.nonce
    };
  }
}
exports.Device = Device;
//# sourceMappingURL=device.js.map