"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Hasher = void 0;
var _cryptoJs = require("crypto-js");
class Hasher {
  static obtainExperimentHashDouble({
    visitorCode,
    campaignId,
    respoolTime
  }) {
    let respoolTimeString = '';
    if (respoolTime.length) {
      respoolTime.forEach(respoolObject => {
        respoolTimeString += String(respoolObject.value);
      });
    }
    return this.calculateHash(visitorCode + campaignId + respoolTimeString);
  }
  static obtainFeatureFlagHashDouble({
    visitorCode,
    campaignId,
    respoolTime
  }) {
    let suffix = '';
    if (respoolTime) {
      suffix += String(respoolTime);
    }
    return this.calculateHash(visitorCode + campaignId + suffix);
  }

  // --- Note ---
  // `hashDouble` is a seeded pseudo-random number between 0 and 1
  // used for deciding what variation to assign
  // `calculateHash` algorithm is consistent between every SDK
  // and will always provide same pseudo-random value for the same input parameters
  static calculateHash(seed) {
    const hashDigest = (0, _cryptoJs.SHA256)(seed).toString();
    return parseInt(hashDigest, 16) / Math.pow(2, 256);
  }
}
exports.Hasher = Hasher;
//# sourceMappingURL=hasher.js.map