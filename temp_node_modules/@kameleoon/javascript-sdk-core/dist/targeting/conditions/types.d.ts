import { Result } from 'ts-res';
import { KameleoonError } from '../../kameleoonError';
import { EvaluationDataType, MatchTypeCustomData, MatchTypeTest, MatchTypeVariation, TargetingType } from '../types';
import { CustomDataCondition } from './customDataCondition';
import { ExclusiveExperimentCondition } from './exclusiveExperimentCondition';
import { TargetExperimentCondition } from './targetExperimentCondition';
export interface ICondition {
    evaluate: (data: EvaluationDataType) => Result<boolean, KameleoonError>;
}
export type ConditionType = CustomDataCondition | ExclusiveExperimentCondition | TargetExperimentCondition;
export type ConditionDataType = {
    id: number;
    targetingType: TargetingType;
    isInclude: boolean | null;
    weight: number;
    customDataIndex: string | null;
    value: string | null;
    valueMatchType: MatchTypeCustomData | null;
    experiment?: number | null;
    variation?: number | null;
    variationMatchType?: MatchTypeVariation | null;
    testMatchType?: MatchTypeTest | null;
};
