"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomDataCondition = void 0;
var _tsRes = require("ts-res");
var _kameleoonData = require("../../kameleoonData");
var _kameleoonError = require("../../kameleoonError");
var _types = require("../types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class CustomDataCondition {
  constructor({
    customDataIndex,
    valueMatchType,
    isInclude,
    value
  }) {
    _defineProperty(this, "customDataIndex", void 0);
    _defineProperty(this, "matchType", void 0);
    _defineProperty(this, "inverseResult", void 0);
    _defineProperty(this, "conditionValue", void 0);
    _defineProperty(this, "error", void 0);
    this.customDataIndex = Number(customDataIndex);
    this.inverseResult = !(isInclude ?? true);
    this.matchType = valueMatchType;
    this.conditionValue = value;
  }
  evaluate({
    targetingData
  }) {
    const isCustomData = data => data.type === _kameleoonData.KameleoonData.CustomData;
    const filteredData = targetingData.map(item => item.data).filter(isCustomData).filter(item => item.index === this.customDataIndex);
    if (filteredData.length) {
      const lastDataItem = filteredData[filteredData.length - 1];
      const {
        value: customDataValue
      } = lastDataItem;
      const result = this.inverseResult ? !this.checkCondition(customDataValue) : this.checkCondition(customDataValue);
      if (this.error) {
        return (0, _tsRes.Err)(this.error);
      }
      return (0, _tsRes.Ok)(result);
    }
    return (0, _tsRes.Ok)(this.matchType === _types.MatchTypeCustomData.UNDEFINED);
  }
  checkCondition(customDataValue) {
    if (this.conditionValue === null) {
      return false;
    }

    // --- Note ---
    // `AMONG_VALUES` is checked separately to avoid recursion overhead
    // for `JSON.parse` inside `this.parseArray`
    if (this.matchType === _types.MatchTypeCustomData.AMONG_VALUES) {
      const result = this.parseArray(this.conditionValue);
      if (!result.ok) {
        this.error = result.error;
        return false;
      }
      const resultData = new Set(result.data);
      return Array.isArray(customDataValue) ? customDataValue.some(value => resultData.has(value)) : result.data.includes(customDataValue);
    }
    if (Array.isArray(customDataValue)) {
      return customDataValue.some(value => this.checkCondition(value));
    }
    switch (this.matchType) {
      case _types.MatchTypeCustomData.CONTAINS:
        return customDataValue.includes(this.conditionValue);
      case _types.MatchTypeCustomData.EXACT:
        return customDataValue === this.conditionValue;
      case _types.MatchTypeCustomData.REGULAR_EXPRESSION:
        return this.parseRegExp(this.conditionValue).test(customDataValue);
      case _types.MatchTypeCustomData.LOWER:
        return Number(customDataValue) < Number(this.conditionValue);
      case _types.MatchTypeCustomData.EQUAL:
        return Number(customDataValue) === Number(this.conditionValue);
      case _types.MatchTypeCustomData.GREATER:
        return Number(customDataValue) > Number(this.conditionValue);
      case _types.MatchTypeCustomData.TRUE:
        return customDataValue.toLowerCase() === 'true';
      case _types.MatchTypeCustomData.FALSE:
        return customDataValue.toLowerCase() === 'false';
      default:
        return false;
    }
  }
  parseRegExp(value) {
    if (value[0] === '/') {
      const [_, expression, flags] = value.split('/');
      return new RegExp(expression, flags);
    }
    return new RegExp(value);
  }
  parseArray(value) {
    try {
      const result = JSON.parse(value);
      if (Array.isArray(result)) {
        return (0, _tsRes.Ok)(result);
      }
    } catch (err) {
      return (0, _tsRes.Err)(new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.AmongValuesCheck, err, value));
    }
    return (0, _tsRes.Ok)([]);
  }
}
exports.CustomDataCondition = CustomDataCondition;
//# sourceMappingURL=customDataCondition.js.map