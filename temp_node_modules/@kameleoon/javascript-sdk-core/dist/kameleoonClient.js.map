{"version":3,"file":"kameleoonClient.js","names":["_tsRes","require","_cacheManager","_campaignConfiguration","_clientSettings","_constants","_kameleoonData","_kameleoonError","_requester","_storage","_externalStorage","_utilities","_variationConfiguration","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","KameleoonClient","constructor","siteCode","configuration","internalConfiguration","settings","clientSettings","ClientSettings","externalPackageInfo","externalRequestDispatcher","requester","Requester","environment","packageInfo","requestDispatcher","trackingCache","CacheManager","CACHE_CLEANUP_TIMEOUT","initialize","externalStorage","externalEventSource","externalClientConfiguration","targetingDataCleanupInterval","clientDataStorage","ExternalStorage","KameleoonStorageKey","ClientData","variationDataStorage","VariationData","campaignConfiguration","CampaignConfiguration","storage","targetingCleanupInterval","result","throw","variationConfiguration","VariationConfiguration","experiments","ok","addData","visitorCode","data","Utilities","validateVisitorCode","KameleoonError","KameleoonException","Initialization","addTargetingData","triggerExperiment","experimentId","experiment","find","item","id","ExperimentConfigurationNotFound","userAgent","getUserAgent","dataUrl","getDataUrl","targetingData","storedTargetingData","trackingParameters","body","variationId","UNALLOCATED_VARIATION_ID","isUnallocated","targetingResult","checkTargeting","segment","getAssociatedVariationId","else","error","type","NotAllocated","trackExperiment","NotTargeted","updateCache","cacheManager","trackConversion","goalId","revenue","Conversion","flushData","trackData","getExperiments","map","name","getVisitorExperiments","isActive","experimentVariations","getAssignedVariations","experimentVariation","variationResult","getExperimentVariation","getExperimentVariationData","variation","variations","JSON","parse","customJson","err","JSONParse","VariationNotFound","getFeatureFlags","featureFlags","featureKey","getVisitorFeatureFlags","resultFeatureFlags","featureFlag","variationData","getFeatureFlagVariation","variationKey","OFF_VARIATION_KEY","featureFlagId","getFeatureFlagVariationKey","_getFeatureFlagVariation","getFeatureFlagVariable","variableKey","variable","variables","FeatureFlagConfigurationNotFound","featureVariable","parseFeatureVariable","isFeatureFlagActive","getRemoteData","remoteData","onConfigurationUpdate","callback","getEngineTrackingCode","getTrackingCode","Err","withAssignment","rule","trackRule","featureFlagVariation","Ok","exports"],"sources":["../src/kameleoonClient.ts"],"sourcesContent":["import { Err, Ok, Result } from 'ts-res';\nimport { CacheManager } from './cacheManager';\nimport { CampaignConfiguration, JSONType } from './campaignConfiguration';\nimport { ClientSettings, ClientSettingsType } from './clientSettings';\nimport {\n  CACHE_CLEANUP_TIMEOUT,\n  OFF_VARIATION_KEY,\n  UNALLOCATED_VARIATION_ID,\n} from './constants';\nimport { Conversion, KameleoonDataType } from './kameleoonData';\nimport { KameleoonError, KameleoonException } from './kameleoonError';\nimport { Requester, TrackExperimentParamsType } from './requester';\nimport {\n  ClientDataType,\n  KameleoonStorageKey,\n  VariationDataType,\n} from './storage';\nimport { ExternalStorage } from './storage/externalStorage';\nimport {\n  TrackConversionParamsType,\n  ExperimentType,\n  FeatureFlagType,\n  GetFeatureFlagVariableParamsType,\n  FeatureVariableResultType,\n  InternalSDKConfigurationType,\n  SDKCoreParameters,\n  TrackingCacheItemType,\n} from './types';\nimport { Utilities } from './utilities';\nimport {\n  FeatureFlagVariationType,\n  VariationConfiguration,\n} from './variationConfiguration';\n\n/**\n * @interface an interface of KameleoonClient instance\n */\nexport interface IKameleoonClient {\n  /**\n   * @method initialize - an asynchronous method for KameleoonClient initialization by fetching Kameleoon SDK related data from server or by retrieving data from local source if data is up-to-date or update interval has not been reached\n   * @returns {Promise<boolean>} Promise resolved into boolean field indicating success or fail\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.ClientConfiguration` Couldn't retrieve client configuration from Kameleoon Api\n   */\n  initialize: () => Promise<boolean>;\n  /**\n   * @method addData - method for adding targeting data to the storage so that other methods could decide whether the current visitor is targeted or not. Note: userAgent data will not be stored in storage like other data, and it will be sent with every tracking request for bot filtration.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {KameleoonDataType[]} kameleoonData - number of instances of any type of `KameleoonData`, can be added solely in array or as a sequential arguments\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  addData: (visitorCode: string, ...data: KameleoonDataType[]) => void;\n  /**\n   * @method triggerExperiment - triggers experiment by assigning the variation to the user with `visitorCode`, if the variation is already assigned just returns it's id. Note: returned id `0` indicates default variation.  At the same time executes `flushData` without sending extra request.\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {number} experimentId - id of experiment running for the current visitor\n   * @returns {number} associated variationId which is successfully searched/assigned\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.ExperimentConfigurationNotFound` No configuration found for provided `experimentId`\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.StorageRead` Couldn't find associated experiment by provided `experimentId` and `visitorCode` inside the storage\n   * - `KameleoonException.NotTargeted` Current visitor is not targeted\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  triggerExperiment: (visitorCode: string, experimentId: number) => number;\n  /**\n   * @method trackConversion - creates and adds `Conversion` data to the visitor with specified parameters and executes `flushData`. Note: it's a helper method for the quick and convenient conversion tracking, however creating and adding `Conversion` manually allows more flexible `Conversion` with `negative` parameter\n   * @param {TrackConversionParamsType} conversionParameters - `visitorCode`, `goalId` and `revenue` parameters for data tracking\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` The visitor code length was exceeded\n   * - `KameleoonException.StorageWrite` Couldn't update storage data\n   */\n  trackConversion: ({\n    visitorCode,\n    goalId,\n    revenue,\n  }: TrackConversionParamsType) => void;\n  /**\n   * @method flushData - takes visitor associated kameleoon data and sends the data tracking request with collected data\n   * sent data is removed from `KameleoonClient` instance but not from the storage for correct targeting checks\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  flushData: (visitorCode: string) => void;\n  /**\n   * @method getExperiments - returns a list of experiments stored in the client configuration\n   * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getExperiments: () => ExperimentType[];\n  /**\n   * @method getVisitorExperiments - returns a list of experiments that the visitor with `visitorCode` is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated if the experiment will be triggered).\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {boolean | undefined} isAllocated - boolean value indicating that only experiments *allocated* for visitor will be returned. Default value is `true`\n   * @returns {ExperimentType[]} a list of all experiments items with `id` and `name` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getVisitorExperiments: (\n    visitorCode: string,\n    isAllocated?: boolean,\n  ) => ExperimentType[];\n  /**\n   * @method getExperimentVariationData - returns variation data in JSON format for the variation with `variationId`\n   * @param {number} variationId - id of variation\n   * @returns {JSONType} variation data in JSON format\n   * @throws `KameleoonError` with one of the following `type` s:\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.JSONParse` - Couldn't pass JSON value\n   * - `KameleoonException.VariationNotFound` - No variation found for provided `variationId`\n   */\n  getExperimentVariationData: (variationId: number) => JSONType | null;\n  /**\n   * @method getFeatureFlags - returns a list of feature flags stored in the client configuration\n   * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  getFeatureFlags: () => FeatureFlagType[];\n  /**\n   * @method getVisitorFeatureFlags - returns a list of feature flags that the visitor with `visitorCode` that is targeted by and that are *active* for the visitor (visitor will have one of the variations allocated).\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {FeatureFlagType[]} a list of all feature flags items with `id` and `key` fields\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  getVisitorFeatureFlags: (visitorCode: string) => FeatureFlagType[];\n  /**\n   * @method isFeatureFlagActive - returns a boolean indicating whether the visitor with `visitorCode` has `featureKey` active for him, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {string} featureKey - a unique key for feature flag\n   * @returns {boolean} a boolean indicator of whether the feature flag with `featureKey` is active for visitor with `visitorCode`\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.DataInconsistency` - Allocated variation was found but there is no feature flag with according `featureKey`.\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  isFeatureFlagActive: (visitorCode: string, featureKey: string) => boolean;\n  /**\n   * @method getFeatureFlagVariationKey - returns variation key for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @param {string} featureKey - a unique key for feature flag\n   * @returns {string} a string containing variable key for the allocated feature flag variation for the provided visitor\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   */\n  getFeatureFlagVariationKey: (\n    visitorCode: string,\n    featureKey: string,\n  ) => string;\n  /**\n   * @method getFeatureFlagVariable - returns a variable for the visitor under `visitorCode` in the found feature flag, this method includes targeting check, finding the according variation exposed to the visitor and saving it to storage along with sending tracking request\n   * @param {GetFeatureFlagVariableParamsType} parameters - an object with parameters of a type `GetFeatureFlagVariableParamsType`, see the type for details.\n   * @returns {FeatureVariableResultType} a variable object containing `type` and `value` fields, `type` can be checked against `FeatureVariableType` enum, if the `type` is `FeatureVariableType.BOOLEAN` then the `value` type will be `boolean` and so on.\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.VisitorCodeMaxLength` - The visitor code length was exceeded\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   * - `KameleoonException.FeatureFlagConfigurationNotFound` - No feature flag was found for provided `visitorCode` and `featureKey`\n   * - `KameleoonException.NotTargeted` - Current visitor is not targeted\n   * - `KameleoonException.JSONParse` - Couldn't pass JSON value\n   * - `KameleoonException.NumberParse` - Couldn't pass Number value\n   */\n  getFeatureFlagVariable: ({\n    visitorCode,\n    featureKey,\n    variableKey,\n  }: GetFeatureFlagVariableParamsType) => FeatureVariableResultType;\n  /**\n   * @method getRemoteData - returns a data which is stored for specified siteCode on a remote Kameleoon server.\n   * @param {string} key - unique key that the data you try to get is associated with.\n   * @returns {JSONType} - promise with retrieving data for specific key.\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.RemoteData` - Couldn't retrieve data from Kameleoon server\n   */\n  getRemoteData: (key: string) => Promise<JSONType>;\n  /**\n   * @method getEngineTrackingCode - returns Kameleoon tracking code for the current visitor. Tracking code is built of the experiments that were triggered and feature flag variations that were assigned during the last 5 seconds\n   * See [Kameleoon Automation API](https://developers.kameleoon.com/apis/activation-api-js/api-reference#trigger-1) for the details\n   * @param {string} visitorCode - unique visitor identification string, can't exceed 255 characters length\n   * @returns {string} Kameleoon tracking code\n   */\n  getEngineTrackingCode: (visitorCode: string) => string;\n  /**\n   * @method onConfigurationUpdate - fires a callback on client configuration update. Note: this method only works for server sent events of real time update.\n   * @param {() => void} callback - callback function with no parameters that will be called upon configuration update\n   * @returns {void}\n   * @throws `KameleoonError` with one of the following `type` s:\n   *\n   * - `KameleoonException.Initialization` - Method was executed before `initialize` was done for `kameleoonClient`\n   */\n  onConfigurationUpdate: (callback: () => void) => void;\n}\n\n/**\n * @class\n * KameleoonClient - a class for creating kameleoon client instance\n * for communicating with Kameleoon JavaScript SDK Core, when new instance is created\n */\nexport class KameleoonClient implements IKameleoonClient {\n  private internalConfiguration: InternalSDKConfigurationType;\n  private variationConfiguration?: VariationConfiguration;\n  private campaignConfiguration?: CampaignConfiguration;\n  private settings: ClientSettingsType;\n  private trackingCache: CacheManager<TrackingCacheItemType>;\n  private requester: Requester;\n\n  /**\n   * @param {SDKCoreParameters} sdkCoreParameters - parameters for initializing sdk core\n   */\n  constructor({\n    siteCode,\n    configuration,\n    internalConfiguration,\n  }: SDKCoreParameters) {\n    const { settings: clientSettings } = new ClientSettings(\n      siteCode,\n      configuration,\n    );\n    const { externalPackageInfo, externalRequestDispatcher } =\n      internalConfiguration;\n    const requester = new Requester({\n      siteCode,\n      environment: clientSettings.environment,\n      packageInfo: externalPackageInfo,\n      requestDispatcher: externalRequestDispatcher,\n    });\n    const trackingCache = new CacheManager<TrackingCacheItemType>(\n      CACHE_CLEANUP_TIMEOUT,\n    );\n\n    this.requester = requester;\n    this.settings = clientSettings;\n    this.trackingCache = trackingCache;\n    this.internalConfiguration = internalConfiguration;\n  }\n\n  public async initialize(): Promise<boolean> {\n    const {\n      externalStorage,\n      externalEventSource,\n      externalClientConfiguration,\n      targetingDataCleanupInterval,\n    } = this.internalConfiguration;\n\n    const clientDataStorage = new ExternalStorage<ClientDataType>(\n      externalStorage.initialize(KameleoonStorageKey.ClientData),\n    );\n    const variationDataStorage = new ExternalStorage<VariationDataType>(\n      externalStorage.initialize(KameleoonStorageKey.VariationData),\n    );\n\n    const campaignConfiguration = new CampaignConfiguration({\n      settings: this.settings,\n      storage: clientDataStorage,\n      requester: this.requester,\n      externalClientConfiguration,\n      targetingCleanupInterval: targetingDataCleanupInterval,\n    });\n\n    const result = await campaignConfiguration.initialize(externalEventSource);\n    result.throw();\n\n    const variationConfiguration = new VariationConfiguration(\n      campaignConfiguration.experiments,\n      variationDataStorage,\n    );\n\n    this.variationConfiguration = variationConfiguration;\n    this.campaignConfiguration = campaignConfiguration;\n\n    return result.ok;\n  }\n\n  public addData(visitorCode: string, ...data: KameleoonDataType[]): void {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    this.campaignConfiguration.addTargetingData(visitorCode, ...data).throw();\n  }\n\n  public triggerExperiment(visitorCode: string, experimentId: number): number {\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    if (!this.campaignConfiguration || !this.variationConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const experiment = this.campaignConfiguration.experiments.find(\n      (item) => item.id === String(experimentId),\n    );\n\n    if (!experiment) {\n      throw new KameleoonError(\n        KameleoonException.ExperimentConfigurationNotFound,\n        experimentId,\n        visitorCode,\n      );\n    }\n\n    const userAgent = Utilities.getUserAgent(\n      visitorCode,\n      this.campaignConfiguration,\n    );\n    const dataUrl = Utilities.getDataUrl(\n      visitorCode,\n      this.campaignConfiguration,\n    );\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n    const trackingParameters: Omit<\n      TrackExperimentParamsType,\n      'variationId' | 'isUnallocated'\n    > = {\n      body: dataUrl,\n      visitorCode,\n      experimentId,\n    };\n\n    let variationId = UNALLOCATED_VARIATION_ID;\n    let isUnallocated = true;\n\n    const targetingResult = Utilities.checkTargeting({\n      visitorCode,\n      experimentId,\n      targetingData,\n      segment: experiment.segment,\n      variationConfiguration: this.variationConfiguration,\n    }).throw();\n\n    variationId = this.variationConfiguration\n      .getAssociatedVariationId(visitorCode, experimentId)\n      .else((error) => {\n        if (error.type === KameleoonException.NotAllocated) {\n          this.requester.trackExperiment({\n            isUnallocated: true,\n            variationId,\n            userAgent,\n            ...trackingParameters,\n          });\n\n          return UNALLOCATED_VARIATION_ID;\n        }\n\n        throw error;\n      });\n\n    this.requester.trackExperiment({\n      variationId,\n      isUnallocated,\n      userAgent,\n      ...trackingParameters,\n    });\n\n    if (!targetingResult) {\n      throw new KameleoonError(KameleoonException.NotTargeted, visitorCode);\n    }\n\n    Utilities.updateCache({\n      cacheManager: this.trackingCache,\n      visitorCode,\n      experimentId,\n      variationId,\n    });\n\n    return variationId;\n  }\n\n  public trackConversion({\n    visitorCode,\n    goalId,\n    revenue,\n  }: TrackConversionParamsType): void {\n    this.addData(visitorCode, new Conversion({ goalId, revenue }));\n    this.flushData(visitorCode);\n  }\n\n  public flushData(visitorCode: string): void {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const dataUrl = Utilities.getDataUrl(\n      visitorCode,\n      this.campaignConfiguration,\n    );\n\n    const userAgent = Utilities.getUserAgent(\n      visitorCode,\n      this.campaignConfiguration,\n    );\n\n    this.requester.trackData({ visitorCode, body: dataUrl, userAgent });\n  }\n\n  public getExperiments(): ExperimentType[] {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    return this.campaignConfiguration.experiments.map(({ id, name }) => ({\n      id: Number(id),\n      name,\n    }));\n  }\n\n  public getVisitorExperiments(\n    visitorCode: string,\n    isActive = true,\n  ): ExperimentType[] {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    Utilities.validateVisitorCode(visitorCode).throw();\n\n    const experiments = this.campaignConfiguration.experiments;\n    const result: ExperimentType[] = [];\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    for (const experiment of experiments) {\n      const { id, name, segment } = experiment;\n\n      const targetingResult = Utilities.checkTargeting({\n        targetingData,\n        visitorCode,\n        segment,\n        variationConfiguration: this.variationConfiguration,\n        experimentId: Number(id),\n      }).throw();\n\n      if (!targetingResult) {\n        continue;\n      }\n\n      // -- If `isActive=false` then return every experiment\n      if (!isActive) {\n        result.push({ id: Number(id), name });\n        continue;\n      }\n\n      // -- Else first check if there are saved variations for the experiment\n      // if there is at least one than it's active\n      const experimentVariations =\n        this.variationConfiguration.getAssignedVariations(visitorCode);\n\n      if (experimentVariations.ok) {\n        const experimentVariation = experimentVariations.data[experiment.id];\n\n        if (experimentVariation) {\n          result.push({ id: Number(id), name });\n          continue;\n        }\n      }\n\n      // -- Second check if the experiment will have an allocated variation upon triggering\n      // if yes than it's active\n      const variationResult =\n        this.variationConfiguration.getExperimentVariation(\n          visitorCode,\n          experiment,\n        );\n\n      if (variationResult.ok) {\n        result.push({ id: Number(id), name });\n      }\n    }\n\n    return result;\n  }\n\n  public getExperimentVariationData(variationId: number): JSONType {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const experiments = this.campaignConfiguration.experiments;\n\n    for (const experiment of experiments) {\n      const variation = experiment.variations.find(\n        (item) => item.id === String(variationId),\n      );\n\n      if (variation) {\n        try {\n          return JSON.parse(variation.customJson);\n        } catch (err) {\n          throw new KameleoonError(KameleoonException.JSONParse, err);\n        }\n      }\n    }\n\n    throw new KameleoonError(KameleoonException.VariationNotFound);\n  }\n\n  public getFeatureFlags(): FeatureFlagType[] {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    return this.campaignConfiguration.featureFlags.map(\n      ({ id, featureKey }) => ({ id, key: featureKey }),\n    );\n  }\n\n  public getVisitorFeatureFlags(visitorCode: string): FeatureFlagType[] {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    const featureFlags = this.campaignConfiguration.featureFlags;\n    const resultFeatureFlags: FeatureFlagType[] = [];\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    for (const featureFlag of featureFlags) {\n      const variationData = this.variationConfiguration\n        .getFeatureFlagVariation({\n          visitorCode,\n          targetingData,\n          featureFlag,\n        })\n        .throw();\n\n      if (variationData.variationKey !== OFF_VARIATION_KEY) {\n        const { featureFlagId, featureKey } = variationData;\n\n        resultFeatureFlags.push({ id: featureFlagId, key: featureKey });\n      }\n    }\n\n    return resultFeatureFlags;\n  }\n\n  public getFeatureFlagVariationKey(\n    visitorCode: string,\n    featureKey: string,\n  ): string {\n    const { variationKey } = this._getFeatureFlagVariation(\n      visitorCode,\n      featureKey,\n    ).throw();\n\n    return variationKey;\n  }\n\n  public getFeatureFlagVariable({\n    visitorCode,\n    featureKey,\n    variableKey,\n  }: GetFeatureFlagVariableParamsType): FeatureVariableResultType {\n    const { variationKey } = this._getFeatureFlagVariation(\n      visitorCode,\n      featureKey,\n    ).throw();\n\n    // --- Note ---\n    // `_getFeatureFlagVariation` already checks `campaignConfiguration` initialization\n    const featureFlags = (this.campaignConfiguration as CampaignConfiguration)\n      .featureFlags;\n\n    const variable = featureFlags\n      .find((item) => item.featureKey === featureKey)\n      ?.variations.find((item) => item.key === variationKey)\n      ?.variables.find((item) => item.key === variableKey);\n\n    if (!variable) {\n      throw new KameleoonError(\n        KameleoonException.FeatureFlagConfigurationNotFound,\n        featureKey,\n        visitorCode,\n      );\n    }\n\n    const featureVariable = Utilities.parseFeatureVariable(variable).throw();\n\n    return featureVariable;\n  }\n\n  public isFeatureFlagActive(visitorCode: string, featureKey: string): boolean {\n    const variationKey = this.getFeatureFlagVariationKey(\n      visitorCode,\n      featureKey,\n    );\n\n    return variationKey !== OFF_VARIATION_KEY;\n  }\n\n  public async getRemoteData(key: string): Promise<JSONType> {\n    const remoteData = await this.requester.getRemoteData(key);\n\n    return remoteData.throw();\n  }\n\n  public onConfigurationUpdate(callback: () => void): void {\n    if (!this.campaignConfiguration) {\n      throw new KameleoonError(KameleoonException.Initialization);\n    }\n\n    this.campaignConfiguration.onConfigurationUpdate(callback);\n  }\n\n  public getEngineTrackingCode(visitorCode: string): string {\n    return Utilities.getTrackingCode(this.trackingCache, visitorCode);\n  }\n\n  private _getFeatureFlagVariation(\n    visitorCode: string,\n    featureKey: string,\n  ): Result<FeatureFlagVariationType, KameleoonError> {\n    if (!this.variationConfiguration || !this.campaignConfiguration) {\n      return Err(new KameleoonError(KameleoonException.Initialization));\n    }\n\n    const featureFlags = this.campaignConfiguration.featureFlags;\n    const featureFlag = featureFlags.find(\n      (item) => item.featureKey === featureKey,\n    );\n\n    if (!featureFlag) {\n      return Err(\n        new KameleoonError(\n          KameleoonException.FeatureFlagConfigurationNotFound,\n          featureKey,\n          visitorCode,\n        ),\n      );\n    }\n\n    const targetingData =\n      this.campaignConfiguration.storedTargetingData[visitorCode];\n\n    const variationData = this.variationConfiguration\n      .getFeatureFlagVariation({\n        visitorCode,\n        featureFlag,\n        targetingData,\n        withAssignment: true,\n      })\n      .throw();\n\n    const { experimentId, variationId, rule } = variationData;\n\n    if (typeof variationId === 'number' && typeof experimentId === 'number') {\n      Utilities.updateCache({\n        cacheManager: this.trackingCache,\n        visitorCode,\n        experimentId,\n        variationId,\n      });\n    }\n\n    const userAgent = Utilities.getUserAgent(\n      visitorCode,\n      this.campaignConfiguration,\n    );\n\n    if (rule) {\n      Utilities.trackRule({\n        visitorCode,\n        requester: this.requester,\n        featureFlagVariation: variationData,\n        campaignConfiguration: this.campaignConfiguration,\n        userAgent,\n      });\n    }\n\n    return Ok(variationData);\n  }\n}\n"],"mappings":"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"}