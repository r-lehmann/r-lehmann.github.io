{"version":3,"file":"kameleoonUtils.js","names":["_tsRes","require","_constants","KameleoonUtils","generateRandomString","length","characters","randomString","i","Math","floor","random","getCookieVisitorCode","cookie","pairs","split","Cookie","PairsDelimiter","pair","find","key","_","KeyValueDelimiter","KAMELEOON_COOKIE_KEY","value","Ok","Err","getResultCookie","domain","visitorCode","yearSeconds","cookieArray","MaxAge","Path","Domain","join","exports"],"sources":["../src/kameleoonUtils.ts"],"sourcesContent":["import { Err, Ok, Result } from 'ts-res';\nimport { Cookie, KAMELEOON_COOKIE_KEY } from './constants';\nimport {\n  GetResultCookieParametersType,\n  ClientGetVisitorCodeParametersType,\n  ServerGetVisitorCodeParametersType,\n  MobileGetVisitorCodeParametersType,\n} from './types';\n\n/**\n * @abstract\n * KameleoonUtils - an abstract class for extending kameleoon utils with pre-defined method signatures\n * */\nexport abstract class KameleoonUtils {\n  abstract getVisitorCode(\n    param:\n      | ClientGetVisitorCodeParametersType\n      | ServerGetVisitorCodeParametersType\n      | MobileGetVisitorCodeParametersType,\n  ): string;\n\n  protected generateRandomString(length: number): string {\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n    let randomString = '';\n\n    if (length < 0) {\n      return randomString;\n    }\n\n    for (let i = 0; i < length; i++) {\n      randomString += characters[Math.floor(Math.random() * characters.length)];\n    }\n\n    return randomString;\n  }\n\n  protected getCookieVisitorCode(cookie: string): Result<string, void> {\n    const pairs = cookie.split(Cookie.PairsDelimiter);\n    const pair = pairs?.find((pair) => {\n      const [key, _] = pair.split(Cookie.KeyValueDelimiter) as [string, string];\n\n      return key === KAMELEOON_COOKIE_KEY;\n    });\n\n    if (pair) {\n      const [_, value] = pair.split(Cookie.KeyValueDelimiter);\n\n      return Ok(value);\n    }\n\n    return Err();\n  }\n\n  protected getResultCookie({\n    domain,\n    visitorCode,\n  }: GetResultCookieParametersType): string {\n    const yearSeconds = 60 * 60 * 24 * 365;\n    const cookieArray = [\n      KAMELEOON_COOKIE_KEY + Cookie.KeyValueDelimiter + visitorCode,\n      Cookie.MaxAge + Cookie.KeyValueDelimiter + yearSeconds,\n      Cookie.Path + Cookie.KeyValueDelimiter + '/',\n      Cookie.Domain + Cookie.KeyValueDelimiter + domain,\n    ];\n\n    return cookieArray.join(Cookie.PairsDelimiter);\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AAQA;AACA;AACA;AACA;AACO,MAAeE,cAAc,CAAC;EAQzBC,oBAAoBA,CAACC,MAAc,EAAU;IACrD,MAAMC,UAAU,GAAG,sCAAsC;IACzD,IAAIC,YAAY,GAAG,EAAE;IAErB,IAAIF,MAAM,GAAG,CAAC,EAAE;MACd,OAAOE,YAAY;IACrB;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC/BD,YAAY,IAAID,UAAU,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,UAAU,CAACD,MAAM,CAAC,CAAC;IAC3E;IAEA,OAAOE,YAAY;EACrB;EAEUK,oBAAoBA,CAACC,MAAc,EAAwB;IACnE,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAK,CAACC,iBAAM,CAACC,cAAc,CAAC;IACjD,MAAMC,IAAI,GAAGJ,KAAK,EAAEK,IAAI,CAAED,IAAI,IAAK;MACjC,MAAM,CAACE,GAAG,EAAEC,CAAC,CAAC,GAAGH,IAAI,CAACH,KAAK,CAACC,iBAAM,CAACM,iBAAiB,CAAqB;MAEzE,OAAOF,GAAG,KAAKG,+BAAoB;IACrC,CAAC,CAAC;IAEF,IAAIL,IAAI,EAAE;MACR,MAAM,CAACG,CAAC,EAAEG,KAAK,CAAC,GAAGN,IAAI,CAACH,KAAK,CAACC,iBAAM,CAACM,iBAAiB,CAAC;MAEvD,OAAO,IAAAG,SAAE,EAACD,KAAK,CAAC;IAClB;IAEA,OAAO,IAAAE,UAAG,GAAE;EACd;EAEUC,eAAeA,CAAC;IACxBC,MAAM;IACNC;EAC6B,CAAC,EAAU;IACxC,MAAMC,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG;IACtC,MAAMC,WAAW,GAAG,CAClBR,+BAAoB,GAAGP,iBAAM,CAACM,iBAAiB,GAAGO,WAAW,EAC7Db,iBAAM,CAACgB,MAAM,GAAGhB,iBAAM,CAACM,iBAAiB,GAAGQ,WAAW,EACtDd,iBAAM,CAACiB,IAAI,GAAGjB,iBAAM,CAACM,iBAAiB,GAAG,GAAG,EAC5CN,iBAAM,CAACkB,MAAM,GAAGlB,iBAAM,CAACM,iBAAiB,GAAGM,MAAM,CAClD;IAED,OAAOG,WAAW,CAACI,IAAI,CAACnB,iBAAM,CAACC,cAAc,CAAC;EAChD;AACF;AAACmB,OAAA,CAAAjC,cAAA,GAAAA,cAAA"}