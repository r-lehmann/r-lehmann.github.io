import { Result } from 'ts-res';
import { KameleoonError } from '../kameleoonError';
import { CheckTargetingParamsType, ManageCacheParametersType, TrackRuleParamsType } from './types';
import { FeatureVariableResultType, TrackingCacheItemType } from '../types';
import { CampaignConfiguration, FeatureVariableType } from '../campaignConfiguration';
import { CacheManager } from '../cacheManager';
export declare class Utilities {
    static checkTargeting({ segment, visitorCode, targetingData, experimentId, variationConfiguration, }: CheckTargetingParamsType): Result<boolean, KameleoonError>;
    static validateVisitorCode(visitorCode: string): Result<void, KameleoonError>;
    static getDataUrl(visitorCode: string, campaignConfiguration: CampaignConfiguration): string;
    static trackRule({ featureFlagVariation, campaignConfiguration, visitorCode, requester, userAgent, }: TrackRuleParamsType): void;
    static parseFeatureVariable(variable: FeatureVariableType): Result<FeatureVariableResultType, KameleoonError>;
    static getUserAgent(visitorCode: string, campaignConfiguration: CampaignConfiguration): string | undefined;
    static updateCache({ cacheManager, visitorCode, experimentId, variationId, }: ManageCacheParametersType): void;
    static getTrackingCode(trackingCache: CacheManager<TrackingCacheItemType>, visitorCode: string): string;
}
