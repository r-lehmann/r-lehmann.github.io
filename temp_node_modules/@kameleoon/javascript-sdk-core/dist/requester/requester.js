"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Requester = void 0;
var _tsRes = require("ts-res");
var _kameleoonError = require("../kameleoonError");
var _constants = require("./constants");
var _nonce = require("../kameleoonData/nonce");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Requester extends _nonce.Nonce {
  constructor({
    siteCode,
    environment,
    packageInfo,
    requestDispatcher
  }) {
    super();
    _defineProperty(this, "siteCode", void 0);
    _defineProperty(this, "environment", void 0);
    _defineProperty(this, "requestDispatcher", void 0);
    _defineProperty(this, "packageInfo", void 0);
    this.requestDispatcher = requestDispatcher;
    this.siteCode = siteCode;
    this.environment = environment;
    this.packageInfo = packageInfo;
  }
  async getClientConfiguration(timeStamp) {
    const environmentParam = this.environment ? _constants.UrlParameter.Environment + this.environment : '';
    const timeStampParam = timeStamp ? _constants.UrlParameter.Ts + timeStamp : '';
    const requestUrl = _constants.URL.CLIENT_CONFIGURATION + _constants.UrlQuery.Mobile + this.siteCode + environmentParam + timeStampParam;
    const response = await this.requestDispatcher.get(requestUrl);
    if (!response) {
      return (0, _tsRes.Err)(new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.ClientConfiguration));
    }
    return (0, _tsRes.Ok)(response);
  }
  async getRemoteData(key) {
    const requestUrl = _constants.URL.DATA + this.siteCode + _constants.UrlParameter.Key + encodeURI(key);
    const response = await this.requestDispatcher.get(requestUrl);
    if (!response) {
      return (0, _tsRes.Err)(new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.RemoteData));
    }
    return (0, _tsRes.Ok)(response);
  }
  async trackExperiment({
    variationId,
    visitorCode,
    experimentId,
    isUnallocated,
    body,
    userAgent,
    callback
  }) {
    const url = this.getTrackingUrl(visitorCode);
    const unallocatedAddition = !body ? _constants.UrlEventType.Activity + _constants.UrlParameter.Nonce + this.nonce : '';
    const bodyAddition = isUnallocated ? unallocatedAddition : _constants.UrlEventType.Experiment + _constants.UrlParameter.Id + experimentId + _constants.UrlParameter.VariationId + variationId + _constants.UrlParameter.Nonce + this.nonce;
    const extendedBody = bodyAddition ? body + '\n' + bodyAddition : body;
    const headers = userAgent ? {
      [_constants.Header.UserAgent]: userAgent
    } : undefined;
    const response = await this.requestDispatcher.track({
      url,
      headers,
      body: extendedBody
    });
    if (response && callback) {
      callback();
    }
  }
  async trackData({
    visitorCode,
    body,
    userAgent
  }) {
    const url = this.getTrackingUrl(visitorCode);
    const headers = userAgent ? {
      [_constants.Header.UserAgent]: userAgent
    } : undefined;
    this.requestDispatcher.track({
      url,
      headers,
      body
    });
  }
  getTrackingUrl(visitorCode) {
    const {
      type,
      version
    } = this.packageInfo;
    return _constants.URL.TRACKING + this.siteCode + _constants.UrlParameter.VisitorCode + encodeURIComponent(visitorCode) + _constants.UrlParameter.SdkName + type + _constants.UrlParameter.SdkVersion + version;
  }
}
exports.Requester = Requester;
//# sourceMappingURL=requester.js.map