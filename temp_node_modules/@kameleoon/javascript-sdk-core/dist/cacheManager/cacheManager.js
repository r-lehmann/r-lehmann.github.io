"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheManager = void 0;
var _types = require("../types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * CacheManager - a class for managing cache
 */
class CacheManager {
  /**
   * @param {number} cleanupTimeout - timeout for cleaning cache in seconds
   * generic type `T` is a type of data that will be stored in cache
   * @example
   * ```typescript
   * const cacheManager = new CacheManager<number>(60);
   * ```
   */
  constructor(cleanupTimeout) {
    _defineProperty(this, "cacheMap", new Map());
    _defineProperty(this, "intervalId", null);
    _defineProperty(this, "cleanupTimeout", void 0);
    this.cleanupTimeout = cleanupTimeout * _types.Milliseconds.Second;
  }
  add({
    key,
    data,
    lifetime
  }) {
    if (this.intervalId === null) {
      this.activate();
    }
    const expirationTime = lifetime * _types.Milliseconds.Second;
    const cacheItem = {
      data,
      expirationTime: Date.now() + expirationTime
    };
    this.cacheMap.set(key, cacheItem);
  }
  getAliveItem(key) {
    const cacheItem = this.cacheMap.get(key);
    if (cacheItem && cacheItem.expirationTime >= Date.now()) {
      return cacheItem.data;
    }
    cacheItem && this.cacheMap.delete(key);
    return null;
  }
  activate() {
    this.intervalId = setInterval(() => {
      const now = Date.now();
      for (const [key, item] of this.cacheMap) {
        if (item.expirationTime < now) {
          this.cacheMap.delete(key);
        }
      }
      if (!this.cacheMap.size) {
        this.cleanupInterval();
      }
    }, this.cleanupTimeout);
  }
  cleanupInterval() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }
}
exports.CacheManager = CacheManager;
//# sourceMappingURL=cacheManager.js.map