"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClientSettings = void 0;
var _types = require("../types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ClientSettings {
  constructor(siteCode, configuration) {
    _defineProperty(this, "updateInterval", 30 * _types.Milliseconds.Minute);
    _defineProperty(this, "environment", void 0);
    _defineProperty(this, "siteCode", void 0);
    this.siteCode = siteCode;
    if (configuration?.environment) {
      this.environment = configuration.environment;
    }
    if (configuration?.updateInterval) {
      if (configuration.updateInterval < 1) {
        this.updateInterval = 1 * _types.Milliseconds.Minute;
      }
      this.updateInterval = configuration.updateInterval * _types.Milliseconds.Minute;
    }
  }
  get settings() {
    return {
      updateInterval: this.updateInterval,
      environment: this.environment,
      siteCode: this.siteCode
    };
  }
}
exports.ClientSettings = ClientSettings;
//# sourceMappingURL=clientSettings.js.map