"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventSourceConstructor = void 0;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class EventSourceConstructor {
  initialize(url) {
    return new ExternalEventSource(url);
  }
}

// --- Note ---
// - `EventSource` has no dedicated tests because same browser instance
// is tested thoroughly inside core and would just duplicate tests
// - Moreover we would have to import some unexposed details like constructed url
// or the `eventType` from the core
exports.EventSourceConstructor = EventSourceConstructor;
class ExternalEventSource {
  constructor(url) {
    _defineProperty(this, "eventSource", void 0);
    const eventSource = new EventSource(url);
    this.eventSource = eventSource;
  }
  open({
    siteCode,
    eventType,
    onEvent
  }) {
    this.eventSource.addEventListener(eventType, message => {
      const event = JSON.parse(message.data);
      const {
        siteCode: eventSiteCode,
        ts
      } = event;
      if (siteCode === eventSiteCode) {
        onEvent(ts);
      }
    });
  }
  close() {
    this.eventSource.close();
  }
}
//# sourceMappingURL=eventSource.js.map