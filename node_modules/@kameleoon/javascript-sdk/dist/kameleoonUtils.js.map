{"version":3,"file":"kameleoonUtils.js","names":["_javascriptSdkCore","require","KameleoonUtilsConstructor","KameleoonCoreUtils","getVisitorCode","domain","defaultVisitorCode","cookie","document","visitorCodeResult","getCookieVisitorCode","ok","data","visitorCode","generateRandomString","VISITOR_CODE_LENGTH","resultCookie","getResultCookie","split","Cookie","PairsDelimiter","forEach","item","KameleoonUtils","kameleoonUtilsConstructor","exports"],"sources":["../src/kameleoonUtils.ts"],"sourcesContent":["import {\n  Cookie,\n  KameleoonCoreUtils,\n  VISITOR_CODE_LENGTH,\n  ClientGetVisitorCodeParametersType,\n} from '@kameleoon/javascript-sdk-core';\n\n// --- Note ---\n// Extra class is created:\n// - To enforce abstract `getVisitorCode` method\n// - To use extended methods while `KameleoonUtils` itself only operates on static methods\n// - To keep similar parameters object on inner implementation and disperse it for proprietary implementations\nclass KameleoonUtilsConstructor extends KameleoonCoreUtils {\n  public getVisitorCode({\n    domain,\n    defaultVisitorCode,\n  }: ClientGetVisitorCodeParametersType): string {\n    const cookie = document.cookie;\n\n    const visitorCodeResult = this.getCookieVisitorCode(cookie);\n\n    if (visitorCodeResult.ok && visitorCodeResult.data) {\n      return visitorCodeResult.data;\n    }\n\n    const visitorCode =\n      defaultVisitorCode || this.generateRandomString(VISITOR_CODE_LENGTH);\n\n    const resultCookie = this.getResultCookie({ domain, visitorCode });\n\n    // --- Note ---\n    // - Browser automatically adds new cookie in the end (without overwrite)\n    // - Only one key-value pair can be added at a time\n    resultCookie.split(Cookie.PairsDelimiter).forEach((item) => {\n      document.cookie = item;\n    });\n\n    return visitorCode;\n  }\n}\n\n/**\n * @class\n * KameleoonUtils - a class with containing a number of static helper methods\n * */\nexport class KameleoonUtils {\n  /**\n   * @method getVisitorCode obtains visitor code from the browser cookie, if the visitor code doesn't yet exist generates a random visitor code (or uses a provided default) and sets a new visitor code to cookie\n   * @param {string} domain domain which cookie belongs to\n   * @param {string | undefined} defaultVisitorCode visitor code to be used in case there is no visitor code in cookies Note: if not passed visitor code will be randomly generated\n   * @returns {string} result visitor code\n   * */\n  static getVisitorCode(domain: string, defaultVisitorCode?: string): string {\n    const kameleoonUtilsConstructor = new KameleoonUtilsConstructor();\n\n    return kameleoonUtilsConstructor.getVisitorCode({\n      domain,\n      defaultVisitorCode,\n    });\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AAOA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,SAASC,qCAAkB,CAAC;EAClDC,cAAcA,CAAC;IACpBC,MAAM;IACNC;EACkC,CAAC,EAAU;IAC7C,MAAMC,MAAM,GAAGC,QAAQ,CAACD,MAAM;IAE9B,MAAME,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAACH,MAAM,CAAC;IAE3D,IAAIE,iBAAiB,CAACE,EAAE,IAAIF,iBAAiB,CAACG,IAAI,EAAE;MAClD,OAAOH,iBAAiB,CAACG,IAAI;IAC/B;IAEA,MAAMC,WAAW,GACfP,kBAAkB,IAAI,IAAI,CAACQ,oBAAoB,CAACC,sCAAmB,CAAC;IAEtE,MAAMC,YAAY,GAAG,IAAI,CAACC,eAAe,CAAC;MAAEZ,MAAM;MAAEQ;IAAY,CAAC,CAAC;;IAElE;IACA;IACA;IACAG,YAAY,CAACE,KAAK,CAACC,yBAAM,CAACC,cAAc,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;MAC1Dd,QAAQ,CAACD,MAAM,GAAGe,IAAI;IACxB,CAAC,CAAC;IAEF,OAAOT,WAAW;EACpB;AACF;;AAEA;AACA;AACA;AACA;AACO,MAAMU,cAAc,CAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;EACE,OAAOnB,cAAcA,CAACC,MAAc,EAAEC,kBAA2B,EAAU;IACzE,MAAMkB,yBAAyB,GAAG,IAAItB,yBAAyB,EAAE;IAEjE,OAAOsB,yBAAyB,CAACpB,cAAc,CAAC;MAC9CC,MAAM;MACNC;IACF,CAAC,CAAC;EACJ;AACF;AAACmB,OAAA,CAAAF,cAAA,GAAAA,cAAA"}