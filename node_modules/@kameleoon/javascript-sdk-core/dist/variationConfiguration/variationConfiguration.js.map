{"version":3,"file":"variationConfiguration.js","names":["_tsRes","require","_hasher","_kameleoonError","_utilities","_types","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","VariationConfiguration","constructor","experiments","externalStorage","visitorCode","experimentId","experiment","find","id","Err","KameleoonError","KameleoonException","ExperimentConfigurationNotFound","assignVariation","storage","getAssignedVariations","result","read","ok","data","StorageRead","Ok","getFeatureFlagVariation","featureFlag","targetingData","withAssignment","validateResult","Utilities","validateVisitorCode","error","rules","featureKey","featureFlagId","defaultVariationKey","rule","segment","exposition","respoolTime","variationByExposition","targetingResult","checkTargeting","variationConfiguration","ruleHash","Hasher","obtainFeatureFlagHashDouble","campaignId","totalDeviation","variationHash","variation","type","RuleType","EXPERIMENTATION","updateStorageData","variationId","restParameters","TARGETED_DELIVERY","variationKey","getExperimentVariation","deviations","hashDouble","obtainExperimentHashDouble","isUnallocated","resultVariationId","deviation","NotAllocated","variationResult","StorageParse","updatedVariationData","updatedVariation","assignmentDate","Date","toString","write","exports"],"sources":["../../src/variationConfiguration/variationConfiguration.ts"],"sourcesContent":["import { Err, Ok, Result } from 'ts-res';\nimport { ExperimentItemType } from '../campaignConfiguration';\nimport { Hasher } from '../hasher';\nimport { KameleoonError, KameleoonException } from '../kameleoonError';\nimport {\n  IStorage,\n  VariationDataType,\n  ExperimentVariationsType,\n} from '../storage';\nimport {\n  FeatureFlagVariationType,\n  GetFeatureFlagVariationParametersType,\n  UpdateStorageParamsType,\n} from './types';\nimport { Utilities } from '../utilities';\nimport { RuleType } from '../campaignConfiguration/types';\n\ninterface IVariationConfiguration {\n  /**\n   * @method getAssociatedVariationId - gets the id of a variation assigned to a visitor with `visitorCode` from the storage. If the visitor doesn't have associated variation yet, assigns a new one, stores it and returns it's id.\n   */\n  getAssociatedVariationId: (\n    visitorCode: string,\n    experimentId: number,\n  ) => Result<number, KameleoonError>;\n  /**\n   * @method getAssignedVariations - obtains experiments with according variations that are *already assigned* and *stored* in the `variationStorage`. If `getAssociatedVariationId` had not been called before, there will be no variations to get.\n   */\n  getAssignedVariations(\n    visitorCode: string,\n  ): Result<ExperimentVariationsType, KameleoonError>;\n  /**\n   * @method getFeatureFlagVariation - obtains variation for the rule of the feature flag which is both targeted and has a variation, if no such rule was found, returns empty rule with default `variationKey`, given an option `withAssignment` of `true` will also assign a new variation and save it in the storage\n   */\n  getFeatureFlagVariation: (\n    params: GetFeatureFlagVariationParametersType,\n  ) => Result<FeatureFlagVariationType, KameleoonError>;\n  /**\n   * @method getExperimentVariation - obtains variation for the experiment by calculating the variation for the visitor *without assigning* it to a visitor\n   */\n  getExperimentVariation: (\n    visitorCode: string,\n    experiment: ExperimentItemType,\n  ) => Result<number, KameleoonError>;\n}\n\nexport class VariationConfiguration implements IVariationConfiguration {\n  private experiments: ExperimentItemType[];\n  private storage: IStorage<VariationDataType>;\n\n  constructor(\n    experiments: ExperimentItemType[],\n    externalStorage: IStorage<VariationDataType>,\n  ) {\n    this.experiments = experiments;\n    this.storage = externalStorage;\n  }\n\n  public getAssociatedVariationId = (\n    visitorCode: string,\n    experimentId: number,\n  ): Result<number, KameleoonError> => {\n    // TODO:\n    // --- Variation from storage is not checked anymore\n    // --- If nothing changes the commented code should be deleted\n    // along with the `Variation` class and according tests/types\n    // --- Mind `todo` in `getAssociatedVariationId.spec.ts`\n    //\n    // let associatedVariation: VariationType | undefined;\n\n    // this.storage.read().and((data) => {\n    //   associatedVariation = data?.[visitorCode]?.[experimentId];\n    // });\n\n    const experiment = this.experiments.find(\n      (experiment) => experiment.id === String(experimentId),\n    );\n\n    if (!experiment) {\n      return Err(\n        new KameleoonError(\n          KameleoonException.ExperimentConfigurationNotFound,\n          experimentId,\n          visitorCode,\n        ),\n      );\n    }\n\n    // const variation = new Variation(associatedVariation);\n\n    // if (variation.isValid(experiment?.respoolTime)) {\n    //   return Ok(variation.id);\n    // }\n\n    return this.assignVariation(visitorCode, experiment);\n  };\n\n  public getAssignedVariations(\n    visitorCode: string,\n  ): Result<ExperimentVariationsType, KameleoonError> {\n    const result = this.storage.read();\n\n    if (!result.ok) {\n      return result;\n    }\n\n    const experiments = result.data[visitorCode];\n\n    if (!experiments) {\n      return Err(\n        new KameleoonError(KameleoonException.StorageRead, visitorCode),\n      );\n    }\n\n    return Ok(experiments);\n  }\n\n  public getFeatureFlagVariation({\n    visitorCode,\n    featureFlag,\n    targetingData,\n    withAssignment = false,\n  }: GetFeatureFlagVariationParametersType): Result<\n    FeatureFlagVariationType,\n    KameleoonError\n  > {\n    const validateResult = Utilities.validateVisitorCode(visitorCode);\n\n    if (!validateResult.ok) {\n      return Err(validateResult.error);\n    }\n\n    const {\n      rules,\n      featureKey,\n      id: featureFlagId,\n      defaultVariationKey,\n    } = featureFlag;\n\n    for (const rule of rules) {\n      const {\n        segment,\n        experimentId,\n        id,\n        exposition,\n        respoolTime,\n        variationByExposition,\n      } = rule;\n\n      // --- Check targeting ---\n      const targetingResult = Utilities.checkTargeting({\n        segment,\n        visitorCode,\n        experimentId,\n        targetingData,\n        variationConfiguration: this,\n      });\n\n      if (!targetingResult.ok) {\n        return targetingResult;\n      }\n\n      if (!targetingResult.data) {\n        continue;\n      }\n\n      // --- Note ---\n      // Calculate new variation (and assign it if `withAssignment` is `true`)\n      // First the the exposed rule is calculated and then the variation inside of it\n      const ruleHash = Hasher.obtainFeatureFlagHashDouble({\n        visitorCode,\n        respoolTime,\n        campaignId: String(id),\n      });\n\n      if (ruleHash <= exposition) {\n        let totalDeviation = 0;\n\n        const variationHash = Hasher.obtainFeatureFlagHashDouble({\n          visitorCode,\n          respoolTime,\n          campaignId: String(experimentId),\n        });\n\n        for (const variation of variationByExposition) {\n          totalDeviation += variation.exposition;\n\n          if (variationHash <= totalDeviation) {\n            // --- Note ---\n            // For the `RuleType.EXPERIMENTATION` variation assignment must happen without\n            // calculating experiment deviation\n            if (rule.type === RuleType.EXPERIMENTATION && withAssignment) {\n              this.updateStorageData({\n                visitorCode,\n                experimentId: String(experimentId),\n                // --- Note ---\n                // For `RuleType.EXPERIMENTATION` `variationId` can not be null\n                variationId: variation.variationId as number,\n              });\n            }\n\n            const { exposition, ...restParameters } = variation;\n\n            return Ok({\n              ...restParameters,\n              rule,\n              featureFlagId,\n              featureKey,\n              experimentId,\n            });\n          }\n        }\n      }\n\n      if (rule.type === RuleType.TARGETED_DELIVERY) {\n        break;\n      }\n    }\n\n    return Ok({\n      featureKey,\n      featureFlagId,\n      experimentId: null,\n      variationKey: defaultVariationKey,\n      variationId: null,\n      rule: null,\n    });\n  }\n\n  public getExperimentVariation(\n    visitorCode: string,\n    experiment: ExperimentItemType,\n  ): Result<number, KameleoonError> {\n    const { id, respoolTime, deviations } = experiment;\n\n    const hashDouble = Hasher.obtainExperimentHashDouble({\n      visitorCode,\n      campaignId: id,\n      respoolTime,\n    });\n\n    let isUnallocated = true;\n    let totalDeviation = 0;\n    let resultVariationId = 0;\n\n    for (const deviation of deviations) {\n      totalDeviation += deviation.value;\n\n      if (totalDeviation >= hashDouble) {\n        // --- Note ---\n        // If sum of all variations is less than 1 (100%), then there is a chance\n        // user will end up outside of any variation\n        isUnallocated = false;\n        // --- Note ---\n        // 'origin' is the default `variationId`, it must return id of 0\n        if (deviation.variationId !== 'origin') {\n          resultVariationId = Number(deviation.variationId);\n        }\n\n        break;\n      }\n    }\n\n    if (isUnallocated) {\n      return Err(\n        new KameleoonError(KameleoonException.NotAllocated, visitorCode),\n      );\n    }\n\n    return Ok(resultVariationId);\n  }\n\n  private assignVariation(\n    visitorCode: string,\n    experiment: ExperimentItemType,\n  ): Result<number, KameleoonError> {\n    const variationResult = this.getExperimentVariation(\n      visitorCode,\n      experiment,\n    );\n\n    if (!variationResult.ok) {\n      return variationResult;\n    }\n\n    const result = this.updateStorageData({\n      visitorCode,\n      experimentId: experiment.id,\n      variationId: variationResult.data,\n    });\n\n    if (!result.ok) {\n      return result;\n    }\n\n    return Ok(variationResult.data);\n  }\n\n  private updateStorageData({\n    visitorCode,\n    experimentId,\n    variationId,\n  }: UpdateStorageParamsType): Result<void, KameleoonError> {\n    const result = this.storage.read();\n\n    if (!result.ok) {\n      // --- Note ---\n      // If there is a parsing error we return error\n      // But if there is `LocalStorageRead` error it means that\n      // data was read successfully and it's empty, which is not problem\n      // cause that might be initial `read`\n      if (result.error.type === KameleoonException.StorageParse) {\n        return result;\n      }\n    }\n\n    const updatedVariationData: VariationDataType = result.ok\n      ? result.data\n      : {};\n\n    const updatedVariation = {\n      variationId,\n      assignmentDate: new Date().toString(),\n    };\n\n    if (updatedVariationData[visitorCode]) {\n      updatedVariationData[visitorCode][experimentId] = updatedVariation;\n    } else {\n      updatedVariationData[visitorCode] = {\n        [experimentId]: updatedVariation,\n      };\n    }\n\n    return this.storage.write(updatedVariationData);\n  }\n\n  // --- TODO: commented out in case of future logic rework ---\n  // --- Mind: `variationId` could cause the `undefined` issue ---\n  // --- Reference: https://development.kameleoon.net/sdk/javascript-sdk-packages/-/merge_requests/89 ---\n  // private getAssignedRuleVariation(\n  //   visitorCode: string,\n  //   rule: RuleItemType,\n  // ): Result<GetAssignedRuleVariationResultType, KameleoonError> {\n  //   const emptyVariation: Omit<VariationByExpositionType, 'exposition'> = {\n  //     variationId: null,\n  //     variationKey: '',\n  //   };\n  //   const { experimentId, variationByExposition } = rule;\n\n  //   const variationsResult = this.getAssignedVariations(visitorCode);\n\n  //   // --- Note ---\n  //   // If there is an error, we just want to skip seeking\n  //   // for variation in the storage, not throw an error\n  //   if (!variationsResult.ok) {\n  //     return Ok(emptyVariation);\n  //   }\n\n  //   const variations = variationsResult.data;\n\n  //   if (\n  //     experimentId &&\n  //     typeof variations[experimentId].variationId !== undefined\n  //   ) {\n  //     const id = variations[experimentId].variationId;\n  //     const featureFlagVariation = variationByExposition.find(\n  //       (item) => item.variationId == id,\n  //     );\n\n  //     if (!featureFlagVariation) {\n  //       // --- Note ---\n  //       // This error is not described for public methods as\n  //       // it serves internal purpose of checking whether\n  //       // the persistent variation has been updated and should be re-allocated\n  //       return Err(new KameleoonError(KameleoonException.DataInconsistency));\n  //     }\n\n  //     const { exposition, ...restParameters } = featureFlagVariation;\n\n  //     return Ok({ ...restParameters });\n  //   }\n\n  //   return Ok(emptyVariation);\n  // }\n}\n"],"mappings":"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"}