"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Variation = void 0;
var _types = require("../types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Variation {
  constructor(variationData) {
    _defineProperty(this, "variationData", void 0);
    this.variationData = variationData;
  }
  get id() {
    if (!this.variationData) {
      throw new Error("Internal usage error: Check if the variation `isValid`, before getting it's `id`");
    }
    return this.variationData.variationId;
  }
  isValid(respoolTime) {
    const variation = this.variationData;
    if (!variation) {
      return false;
    }

    // --- Note ---
    // - Respool is a kind of shuffle parameter
    // it's presence indicates that variations assigned to
    // user has changed at certain time (time is the value of `respoolTime` in seconds)
    // - So the variation is valid unless it has been shuffled after it's assignment
    if (respoolTime?.length) {
      const assignmentTime = new Date(Date.parse(variation.assignmentDate)).getTime() / _types.Milliseconds.Second;
      const variationRespoolTime = respoolTime.find(respool => respool.variationId === String(variation.variationId));
      if (!variationRespoolTime) {
        return true;
      }
      return assignmentTime > variationRespoolTime.value;
    }
    return true;
  }
}
exports.Variation = Variation;
//# sourceMappingURL=variation.js.map