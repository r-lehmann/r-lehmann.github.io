"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TargetingNode = void 0;
var _conditions = require("./conditions");
var _types = require("./types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TargetingNode {
  constructor(value, left, right) {
    _defineProperty(this, "nodeValue", void 0);
    _defineProperty(this, "nodeError", void 0);
    _defineProperty(this, "leftChild", void 0);
    _defineProperty(this, "rightChild", void 0);
    if (this.isOperator(value)) {
      this.nodeValue = value;
    } else {
      const result = _conditions.ConditionFactory.createCondition(value);
      if (result.ok) {
        this.nodeValue = result.data;
      } else {
        this.nodeError = result.error;
      }
    }
    this.leftChild = left;
    this.rightChild = right;
  }
  get value() {
    return this.nodeValue;
  }
  get error() {
    return this.nodeError;
  }
  get left() {
    return this.leftChild;
  }
  get right() {
    return this.rightChild;
  }
  isOperator(value) {
    return value === _types.Operator.And || value === _types.Operator.Or;
  }
}
exports.TargetingNode = TargetingNode;
//# sourceMappingURL=targetingNode.js.map