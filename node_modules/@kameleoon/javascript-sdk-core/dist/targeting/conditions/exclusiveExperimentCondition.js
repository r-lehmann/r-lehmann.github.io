"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExclusiveExperimentCondition = void 0;
var _tsRes = require("ts-res");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ExclusiveExperimentCondition {
  constructor({
    isInclude
  }) {
    _defineProperty(this, "inverseResult", void 0);
    this.inverseResult = !(isInclude ?? true);
  }
  evaluate({
    experimentId,
    variationData
  }) {
    const keys = Object.keys(variationData);
    const isEmpty = !keys.length;
    // --- Note ---
    // Meaning the next variation assignment won't add new experiment
    // but rather overwrite the existing one
    const isExclusive = keys.length === 1 && keys[0] === String(experimentId);
    const isSatisfied = isEmpty || isExclusive;
    return (0, _tsRes.Ok)(this.inverseResult ? !isSatisfied : isSatisfied);
  }
}
exports.ExclusiveExperimentCondition = ExclusiveExperimentCondition;
//# sourceMappingURL=exclusiveExperimentCondition.js.map