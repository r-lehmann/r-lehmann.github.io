"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageView = void 0;
var _requester = require("../requester");
var _nonce = require("./nonce");
var _types = require("./types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * PageView - a class for creating an instance of a page view data
 * */
class PageView extends _nonce.Nonce {
  /**
   * @param {PageViewParametersType} pageViewParameters - an object with page view parameters
   * */
  constructor({
    urlAddress,
    title,
    referrers
  }) {
    super();
    _defineProperty(this, "urlAddress", void 0);
    _defineProperty(this, "title", void 0);
    _defineProperty(this, "referrers", void 0);
    this.urlAddress = urlAddress;
    this.title = title;
    this.referrers = referrers;
  }

  /**
   * @property url - url for the current data type used for events tracking
   * */
  get url() {
    return _requester.UrlEventType.Page + _requester.UrlParameter.Href + encodeURIComponent(this.urlAddress) + _requester.UrlParameter.Title + encodeURIComponent(this.title) + this.getReferresParameter(this.referrers) + _requester.UrlParameter.Nonce + this.nonce;
  }

  /**
   * @property data - data of the current class instance
   * */
  get data() {
    return {
      urlAddress: this.urlAddress,
      title: this.title,
      referrers: this.referrers,
      type: _types.KameleoonData.PageView,
      nonce: this.nonce
    };
  }
  getReferresParameter(referrers) {
    if (referrers) {
      return _requester.UrlParameter.ReferrersIndices + JSON.stringify(referrers);
    }
    return '';
  }
}
exports.PageView = PageView;
//# sourceMappingURL=pageView.js.map