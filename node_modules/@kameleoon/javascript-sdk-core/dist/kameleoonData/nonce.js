"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Nonce = void 0;
var _constants = require("./constants");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Nonce {
  // --- Note ---
  // nonce — «number that can only be used once»
  // is a hex valid string for the one-time use, which helps
  // tracking mechanism to differ one tracking event from another

  constructor() {
    _defineProperty(this, "nonce", void 0);
    this.nonce = this.getNonce();
  }
  getNonce() {
    const hexLength = _constants.HEX_CHARACTERS.length;
    let nonce = '';
    for (let i = 0; i < hexLength; i++) {
      const randomNumber = Math.floor(Math.random() * hexLength);
      nonce += _constants.HEX_CHARACTERS.substring(randomNumber, randomNumber + 1);
    }
    return nonce;
  }
}
exports.Nonce = Nonce;
//# sourceMappingURL=nonce.js.map