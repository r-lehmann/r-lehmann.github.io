"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExternalStorage = void 0;
var _tsRes = require("ts-res");
var _kameleoonError = require("../kameleoonError");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ExternalStorage {
  constructor(externalStorage) {
    _defineProperty(this, "key", void 0);
    _defineProperty(this, "storage", void 0);
    this.key = externalStorage.key;
    this.storage = externalStorage;
  }
  read() {
    const result = this.storage.read();
    if (!result.ok) {
      return result;
    }
    return this.parse(result.data);
  }
  write(data) {
    this.storage.write(JSON.stringify(data));
    return (0, _tsRes.Ok)();
  }
  parse(data) {
    let result;
    try {
      result = JSON.parse(data);
    } catch (err) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.StorageParse, err, this.key);
    }
    return (0, _tsRes.Ok)(result);
  }
}
exports.ExternalStorage = ExternalStorage;
//# sourceMappingURL=externalStorage.js.map