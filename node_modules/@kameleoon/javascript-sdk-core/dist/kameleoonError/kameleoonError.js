"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KameleoonError = void 0;
var _constants = require("./constants");
var _helpers = require("./helpers");
var _types = require("./types");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * KameleoonError - extends standard `Error` by adding custom `type` property with the type of `KameleoonException`
 * */
class KameleoonError extends Error {
  /**
   * @param {KameleoonException} type - type of KameleoonError represented by `KameleoonException` enum
   * */

  constructor(type, secondParam, thirdParam) {
    super(`Error: ${type}`);
    _defineProperty(this, "errorType", void 0);
    this.name = 'KameleoonError';
    this.errorType = type;
    switch (type) {
      case _types.KameleoonException.Initialization:
      case _types.KameleoonException.ClientConfiguration:
      case _types.KameleoonException.VisitorCodeMaxLength:
      case _types.KameleoonException.StorageInitialization:
      case _types.KameleoonException.VariationNotFound:
      case _types.KameleoonException.EventSourceInitialization:
      case _types.KameleoonException.RemoteData:
      case _types.KameleoonException.MaximumRetriesReached:
        this.message = _constants.ERROR_MESSAGES[type]();
        break;
      case _types.KameleoonException.NotAllocated:
      case _types.KameleoonException.NotTargeted:
        this.message = _constants.ERROR_MESSAGES[type](secondParam);
        break;
      case _types.KameleoonException.ExperimentConfigurationNotFound:
        this.message = _constants.ERROR_MESSAGES[type](secondParam, thirdParam);
        break;
      case _types.KameleoonException.FeatureFlagConfigurationNotFound:
        this.message = _constants.ERROR_MESSAGES[type](secondParam, thirdParam);
        break;
      case _types.KameleoonException.StorageWrite:
      case _types.KameleoonException.JSONParse:
        this.message = _constants.ERROR_MESSAGES[type](secondParam);
        break;
      case _types.KameleoonException.StorageRead:
        this.message = _constants.ERROR_MESSAGES[type](secondParam);
        break;
      case _types.KameleoonException.StorageParse:
        this.message = _constants.ERROR_MESSAGES[type](secondParam, thirdParam);
        break;
      case _types.KameleoonException.TargetingCondition:
        this.message = _constants.ERROR_MESSAGES[type](secondParam);
        break;
      case _types.KameleoonException.NumberParse:
        this.message = _constants.ERROR_MESSAGES[type](secondParam);
        break;
      case _types.KameleoonException.AmongValuesCheck:
        this.message = _constants.ERROR_MESSAGES[type](secondParam, thirdParam);
        break;
      default:
        (0, _helpers.exhaustCheck)(type);
    }
  }
  get type() {
    return this.errorType;
  }
}
exports.KameleoonError = KameleoonError;
//# sourceMappingURL=kameleoonError.js.map