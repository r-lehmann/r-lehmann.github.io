"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KameleoonClient = void 0;
var _tsRes = require("ts-res");
var _cacheManager = require("./cacheManager");
var _campaignConfiguration = require("./campaignConfiguration");
var _clientSettings = require("./clientSettings");
var _constants = require("./constants");
var _kameleoonData = require("./kameleoonData");
var _kameleoonError = require("./kameleoonError");
var _requester = require("./requester");
var _storage = require("./storage");
var _externalStorage = require("./storage/externalStorage");
var _utilities = require("./utilities");
var _variationConfiguration = require("./variationConfiguration");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * KameleoonClient - a class for creating kameleoon client instance
 * for communicating with Kameleoon JavaScript SDK Core, when new instance is created
 */
class KameleoonClient {
  /**
   * @param {SDKCoreParameters} sdkCoreParameters - parameters for initializing sdk core
   */
  constructor({
    siteCode,
    configuration,
    internalConfiguration
  }) {
    _defineProperty(this, "internalConfiguration", void 0);
    _defineProperty(this, "variationConfiguration", void 0);
    _defineProperty(this, "campaignConfiguration", void 0);
    _defineProperty(this, "settings", void 0);
    _defineProperty(this, "trackingCache", void 0);
    _defineProperty(this, "requester", void 0);
    const {
      settings: clientSettings
    } = new _clientSettings.ClientSettings(siteCode, configuration);
    const {
      externalPackageInfo,
      externalRequestDispatcher
    } = internalConfiguration;
    const requester = new _requester.Requester({
      siteCode,
      environment: clientSettings.environment,
      packageInfo: externalPackageInfo,
      requestDispatcher: externalRequestDispatcher
    });
    const trackingCache = new _cacheManager.CacheManager(_constants.CACHE_CLEANUP_TIMEOUT);
    this.requester = requester;
    this.settings = clientSettings;
    this.trackingCache = trackingCache;
    this.internalConfiguration = internalConfiguration;
  }
  async initialize() {
    const {
      externalStorage,
      externalEventSource,
      externalClientConfiguration,
      targetingDataCleanupInterval
    } = this.internalConfiguration;
    const clientDataStorage = new _externalStorage.ExternalStorage(externalStorage.initialize(_storage.KameleoonStorageKey.ClientData));
    const variationDataStorage = new _externalStorage.ExternalStorage(externalStorage.initialize(_storage.KameleoonStorageKey.VariationData));
    const campaignConfiguration = new _campaignConfiguration.CampaignConfiguration({
      settings: this.settings,
      storage: clientDataStorage,
      requester: this.requester,
      externalClientConfiguration,
      targetingCleanupInterval: targetingDataCleanupInterval
    });
    const result = await campaignConfiguration.initialize(externalEventSource);
    result.throw();
    const variationConfiguration = new _variationConfiguration.VariationConfiguration(campaignConfiguration.experiments, variationDataStorage);
    this.variationConfiguration = variationConfiguration;
    this.campaignConfiguration = campaignConfiguration;
    return result.ok;
  }
  addData(visitorCode, ...data) {
    _utilities.Utilities.validateVisitorCode(visitorCode).throw();
    if (!this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    this.campaignConfiguration.addTargetingData(visitorCode, ...data).throw();
  }
  triggerExperiment(visitorCode, experimentId) {
    _utilities.Utilities.validateVisitorCode(visitorCode).throw();
    if (!this.campaignConfiguration || !this.variationConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    const experiment = this.campaignConfiguration.experiments.find(item => item.id === String(experimentId));
    if (!experiment) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.ExperimentConfigurationNotFound, experimentId, visitorCode);
    }
    const userAgent = _utilities.Utilities.getUserAgent(visitorCode, this.campaignConfiguration);
    const dataUrl = _utilities.Utilities.getDataUrl(visitorCode, this.campaignConfiguration);
    const targetingData = this.campaignConfiguration.storedTargetingData[visitorCode];
    const trackingParameters = {
      body: dataUrl,
      visitorCode,
      experimentId
    };
    let variationId = _constants.UNALLOCATED_VARIATION_ID;
    let isUnallocated = true;
    const targetingResult = _utilities.Utilities.checkTargeting({
      visitorCode,
      experimentId,
      targetingData,
      segment: experiment.segment,
      variationConfiguration: this.variationConfiguration
    }).throw();
    variationId = this.variationConfiguration.getAssociatedVariationId(visitorCode, experimentId).else(error => {
      if (error.type === _kameleoonError.KameleoonException.NotAllocated) {
        this.requester.trackExperiment(_objectSpread({
          isUnallocated: true,
          variationId,
          userAgent
        }, trackingParameters));
        return _constants.UNALLOCATED_VARIATION_ID;
      }
      throw error;
    });
    this.requester.trackExperiment(_objectSpread({
      variationId,
      isUnallocated,
      userAgent
    }, trackingParameters));
    if (!targetingResult) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.NotTargeted, visitorCode);
    }
    _utilities.Utilities.updateCache({
      cacheManager: this.trackingCache,
      visitorCode,
      experimentId,
      variationId
    });
    return variationId;
  }
  trackConversion({
    visitorCode,
    goalId,
    revenue
  }) {
    this.addData(visitorCode, new _kameleoonData.Conversion({
      goalId,
      revenue
    }));
    this.flushData(visitorCode);
  }
  flushData(visitorCode) {
    if (!this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    const dataUrl = _utilities.Utilities.getDataUrl(visitorCode, this.campaignConfiguration);
    const userAgent = _utilities.Utilities.getUserAgent(visitorCode, this.campaignConfiguration);
    this.requester.trackData({
      visitorCode,
      body: dataUrl,
      userAgent
    });
  }
  getExperiments() {
    if (!this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    return this.campaignConfiguration.experiments.map(({
      id,
      name
    }) => ({
      id: Number(id),
      name
    }));
  }
  getVisitorExperiments(visitorCode, isActive = true) {
    if (!this.variationConfiguration || !this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    _utilities.Utilities.validateVisitorCode(visitorCode).throw();
    const experiments = this.campaignConfiguration.experiments;
    const result = [];
    const targetingData = this.campaignConfiguration.storedTargetingData[visitorCode];
    for (const experiment of experiments) {
      const {
        id,
        name,
        segment
      } = experiment;
      const targetingResult = _utilities.Utilities.checkTargeting({
        targetingData,
        visitorCode,
        segment,
        variationConfiguration: this.variationConfiguration,
        experimentId: Number(id)
      }).throw();
      if (!targetingResult) {
        continue;
      }

      // -- If `isActive=false` then return every experiment
      if (!isActive) {
        result.push({
          id: Number(id),
          name
        });
        continue;
      }

      // -- Else first check if there are saved variations for the experiment
      // if there is at least one than it's active
      const experimentVariations = this.variationConfiguration.getAssignedVariations(visitorCode);
      if (experimentVariations.ok) {
        const experimentVariation = experimentVariations.data[experiment.id];
        if (experimentVariation) {
          result.push({
            id: Number(id),
            name
          });
          continue;
        }
      }

      // -- Second check if the experiment will have an allocated variation upon triggering
      // if yes than it's active
      const variationResult = this.variationConfiguration.getExperimentVariation(visitorCode, experiment);
      if (variationResult.ok) {
        result.push({
          id: Number(id),
          name
        });
      }
    }
    return result;
  }
  getExperimentVariationData(variationId) {
    if (!this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    const experiments = this.campaignConfiguration.experiments;
    for (const experiment of experiments) {
      const variation = experiment.variations.find(item => item.id === String(variationId));
      if (variation) {
        try {
          return JSON.parse(variation.customJson);
        } catch (err) {
          throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.JSONParse, err);
        }
      }
    }
    throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.VariationNotFound);
  }
  getFeatureFlags() {
    if (!this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    return this.campaignConfiguration.featureFlags.map(({
      id,
      featureKey
    }) => ({
      id,
      key: featureKey
    }));
  }
  getVisitorFeatureFlags(visitorCode) {
    if (!this.variationConfiguration || !this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    const featureFlags = this.campaignConfiguration.featureFlags;
    const resultFeatureFlags = [];
    const targetingData = this.campaignConfiguration.storedTargetingData[visitorCode];
    for (const featureFlag of featureFlags) {
      const variationData = this.variationConfiguration.getFeatureFlagVariation({
        visitorCode,
        targetingData,
        featureFlag
      }).throw();
      if (variationData.variationKey !== _constants.OFF_VARIATION_KEY) {
        const {
          featureFlagId,
          featureKey
        } = variationData;
        resultFeatureFlags.push({
          id: featureFlagId,
          key: featureKey
        });
      }
    }
    return resultFeatureFlags;
  }
  getFeatureFlagVariationKey(visitorCode, featureKey) {
    const {
      variationKey
    } = this._getFeatureFlagVariation(visitorCode, featureKey).throw();
    return variationKey;
  }
  getFeatureFlagVariable({
    visitorCode,
    featureKey,
    variableKey
  }) {
    const {
      variationKey
    } = this._getFeatureFlagVariation(visitorCode, featureKey).throw();

    // --- Note ---
    // `_getFeatureFlagVariation` already checks `campaignConfiguration` initialization
    const featureFlags = this.campaignConfiguration.featureFlags;
    const variable = featureFlags.find(item => item.featureKey === featureKey)?.variations.find(item => item.key === variationKey)?.variables.find(item => item.key === variableKey);
    if (!variable) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.FeatureFlagConfigurationNotFound, featureKey, visitorCode);
    }
    const featureVariable = _utilities.Utilities.parseFeatureVariable(variable).throw();
    return featureVariable;
  }
  isFeatureFlagActive(visitorCode, featureKey) {
    const variationKey = this.getFeatureFlagVariationKey(visitorCode, featureKey);
    return variationKey !== _constants.OFF_VARIATION_KEY;
  }
  async getRemoteData(key) {
    const remoteData = await this.requester.getRemoteData(key);
    return remoteData.throw();
  }
  onConfigurationUpdate(callback) {
    if (!this.campaignConfiguration) {
      throw new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization);
    }
    this.campaignConfiguration.onConfigurationUpdate(callback);
  }
  getEngineTrackingCode(visitorCode) {
    return _utilities.Utilities.getTrackingCode(this.trackingCache, visitorCode);
  }
  _getFeatureFlagVariation(visitorCode, featureKey) {
    if (!this.variationConfiguration || !this.campaignConfiguration) {
      return (0, _tsRes.Err)(new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.Initialization));
    }
    const featureFlags = this.campaignConfiguration.featureFlags;
    const featureFlag = featureFlags.find(item => item.featureKey === featureKey);
    if (!featureFlag) {
      return (0, _tsRes.Err)(new _kameleoonError.KameleoonError(_kameleoonError.KameleoonException.FeatureFlagConfigurationNotFound, featureKey, visitorCode));
    }
    const targetingData = this.campaignConfiguration.storedTargetingData[visitorCode];
    const variationData = this.variationConfiguration.getFeatureFlagVariation({
      visitorCode,
      featureFlag,
      targetingData,
      withAssignment: true
    }).throw();
    const {
      experimentId,
      variationId,
      rule
    } = variationData;
    if (typeof variationId === 'number' && typeof experimentId === 'number') {
      _utilities.Utilities.updateCache({
        cacheManager: this.trackingCache,
        visitorCode,
        experimentId,
        variationId
      });
    }
    const userAgent = _utilities.Utilities.getUserAgent(visitorCode, this.campaignConfiguration);
    if (rule) {
      _utilities.Utilities.trackRule({
        visitorCode,
        requester: this.requester,
        featureFlagVariation: variationData,
        campaignConfiguration: this.campaignConfiguration,
        userAgent
      });
    }
    return (0, _tsRes.Ok)(variationData);
  }
}
exports.KameleoonClient = KameleoonClient;
//# sourceMappingURL=kameleoonClient.js.map