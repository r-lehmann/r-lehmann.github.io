import { Result } from 'ts-res';
import { KameleoonError } from '../kameleoonError/kameleoonError';
import { CampaignConfigurationParametersType, ConfigurationType, ExperimentItemType, FeatureFlagType } from './types';
import { KameleoonDataType } from '../kameleoonData';
import { TargetingDataType } from '../targeting';
import { IExternalEventSourceConstructor } from '../eventSource';
interface ICampaignConfiguration {
    initialize: (eventSource: IExternalEventSourceConstructor) => Promise<Result<void, KameleoonError>>;
    addTargetingData: (visitorCode: string, ...data: KameleoonDataType[]) => Result<void, KameleoonError>;
    getUnsentData: (visitorCode: string) => KameleoonDataType[];
    clearUnsentData: (visitorCode: string) => void;
    onConfigurationUpdate: (callback: () => void) => void;
    readonly experiments: ExperimentItemType[];
    readonly storedTargetingData: TargetingDataType;
    readonly featureFlags: FeatureFlagType[];
    readonly configuration: ConfigurationType;
}
export declare class CampaignConfiguration implements ICampaignConfiguration {
    private configurationUpdateCallback?;
    private updateConfigurationIntervalId;
    private targetingDataIntervalId;
    private unsentTargetingData;
    private targetingData;
    private configurationData;
    private settings;
    private lastUpdate;
    private storage;
    private requester;
    private eventSource?;
    private externalClientConfiguration?;
    constructor({ settings, storage, requester, externalClientConfiguration, targetingCleanupInterval, }: CampaignConfigurationParametersType);
    initialize(externalEventSource: IExternalEventSourceConstructor): Promise<Result<void, KameleoonError>>;
    addTargetingData(visitorCode: string, ...data: KameleoonDataType[]): Result<void, KameleoonError>;
    getUnsentData(visitorCode: string): KameleoonDataType[];
    clearUnsentData(visitorCode: string): void;
    onConfigurationUpdate(callback: () => void): void;
    get storedTargetingData(): TargetingDataType;
    get experiments(): ExperimentItemType[];
    get featureFlags(): FeatureFlagType[];
    get configuration(): ConfigurationType;
    private checkShouldUpdate;
    private cleanupOutdatedTargetingData;
    private readStorageData;
    private updateClientConfiguration;
    private updateStorageData;
}
export {};
