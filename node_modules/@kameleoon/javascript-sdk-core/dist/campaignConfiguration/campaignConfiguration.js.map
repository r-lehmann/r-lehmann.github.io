{"version":3,"file":"campaignConfiguration.js","names":["_tsRes","require","_constants","_eventSource","_types","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","CampaignConfiguration","constructor","settings","storage","requester","externalClientConfiguration","targetingCleanupInterval","DEFAULT_CAMPAIGN_CONFIGURATION","targetingData","configurationData","lastUpdate","Date","readStorageData","cleanupIntervalMinutes","targetingDataIntervalId","setInterval","cleanupOutdatedTargetingData","Milliseconds","Minute","err","clearInterval","initialize","externalEventSource","shouldUpdate","checkShouldUpdate","updateResult","updateClientConfiguration","ok","configuration","realTimeUpdate","updateConfigurationIntervalId","eventSource","ExternalEventSource","siteCode","updateEventCallback","_timeStamp","configurationUpdateCallback","open","close","bind","updateInterval","Ok","addTargetingData","visitorCode","data","dataItem","lastActivityTime","now","result","updateStorageData","unsentTargetingData","getUnsentData","unsentDataItem","clearUnsentData","onConfigurationUpdate","callback","storedTargetingData","experiments","featureFlags","lastUpdateTime","getTime","updateWindowEdge","currentTime","resultTargetingData","entries","resultValue","item","isDataExpired","SESSION_DURATION","throw","read","kameleoonTargetingData","kameleoonConfiguration","parse","timeStamp","featureFlagConfigurations","clientConfigurationResult","getClientConfiguration","toString","write","exports"],"sources":["../../src/campaignConfiguration/campaignConfiguration.ts"],"sourcesContent":["import { Ok, Result } from 'ts-res';\nimport { KameleoonError } from '../kameleoonError/kameleoonError';\nimport { ClientSettingsType } from '../clientSettings/types';\nimport { DEFAULT_CAMPAIGN_CONFIGURATION, SESSION_DURATION } from './constants';\nimport {\n  CampaignConfigurationParametersType,\n  ConfigurationDataType,\n  ConfigurationType,\n  ExperimentItemType,\n  FeatureFlagType,\n  UnsentTargetingDataType,\n} from './types';\nimport { KameleoonDataType } from '../kameleoonData';\nimport { Requester, GetClientConfigurationResultType } from '../requester';\nimport { TargetingDataItemType, TargetingDataType } from '../targeting';\nimport { IStorage, ClientDataType } from '../storage';\nimport {\n  ExternalEventSource,\n  IEventSource,\n  IExternalEventSourceConstructor,\n} from '../eventSource';\nimport { Milliseconds } from '../types';\n\ninterface ICampaignConfiguration {\n  initialize: (\n    eventSource: IExternalEventSourceConstructor,\n  ) => Promise<Result<void, KameleoonError>>;\n  addTargetingData: (\n    visitorCode: string,\n    ...data: KameleoonDataType[]\n  ) => Result<void, KameleoonError>;\n  getUnsentData: (visitorCode: string) => KameleoonDataType[];\n  clearUnsentData: (visitorCode: string) => void;\n  onConfigurationUpdate: (callback: () => void) => void;\n  readonly experiments: ExperimentItemType[];\n  readonly storedTargetingData: TargetingDataType;\n  readonly featureFlags: FeatureFlagType[];\n  readonly configuration: ConfigurationType;\n}\n\nexport class CampaignConfiguration implements ICampaignConfiguration {\n  private configurationUpdateCallback?: () => void;\n  private updateConfigurationIntervalId: NodeJS.Timer | null = null;\n  private targetingDataIntervalId: NodeJS.Timer | null = null;\n  private unsentTargetingData: UnsentTargetingDataType = {};\n  private targetingData: TargetingDataType =\n    DEFAULT_CAMPAIGN_CONFIGURATION.targetingData;\n  private configurationData: ConfigurationDataType =\n    DEFAULT_CAMPAIGN_CONFIGURATION.configurationData;\n  private settings: ClientSettingsType;\n  private lastUpdate: Date;\n  private storage: IStorage<ClientDataType>;\n  private requester: Requester;\n  private eventSource?: IEventSource;\n  private externalClientConfiguration?: GetClientConfigurationResultType;\n\n  constructor({\n    settings,\n    storage,\n    requester,\n    externalClientConfiguration,\n    targetingCleanupInterval,\n  }: CampaignConfigurationParametersType) {\n    this.requester = requester;\n    this.settings = settings;\n    this.lastUpdate = new Date();\n    this.storage = storage;\n    this.readStorageData();\n    this.externalClientConfiguration = externalClientConfiguration;\n\n    if (targetingCleanupInterval) {\n      const cleanupIntervalMinutes =\n        targetingCleanupInterval < 0 ? 1 : targetingCleanupInterval;\n\n      // --- Note ---\n      // We can not make delayed code execution recoverable, as it might lead\n      // to targeting data storage size overflow\n      try {\n        this.targetingDataIntervalId = setInterval(\n          () =>\n            this.cleanupOutdatedTargetingData.call(this, this.targetingData),\n          cleanupIntervalMinutes * Milliseconds.Minute,\n        );\n      } catch (err) {\n        if (this.targetingDataIntervalId) {\n          clearInterval(this.targetingDataIntervalId);\n        }\n\n        throw err;\n      }\n    }\n  }\n\n  public async initialize(\n    externalEventSource: IExternalEventSourceConstructor,\n  ): Promise<Result<void, KameleoonError>> {\n    const shouldUpdate = this.checkShouldUpdate();\n\n    // --- Initial data fetch ---\n    if (shouldUpdate) {\n      const updateResult = await this.updateClientConfiguration();\n\n      if (!updateResult.ok) {\n        return updateResult;\n      }\n    }\n\n    // --- Note ---\n    // Interval is cleaned up in case real time update\n    // was activated while initialized client already exists\n    if (\n      this.configurationData.configuration.realTimeUpdate &&\n      !this.externalClientConfiguration\n    ) {\n      if (this.updateConfigurationIntervalId) {\n        clearInterval(this.updateConfigurationIntervalId);\n      }\n\n      this.eventSource = new ExternalEventSource(\n        this.settings.siteCode,\n        externalEventSource,\n      );\n\n      const updateEventCallback = (_timeStamp: number) => {\n        this.updateClientConfiguration();\n\n        if (this.configurationUpdateCallback) {\n          this.configurationUpdateCallback();\n        }\n      };\n\n      this.eventSource.open(updateEventCallback);\n    } else {\n      // --- Note ---\n      // Event Source is cleaned up in case real time update\n      // was disabled while initialized client already exists\n      if (this.eventSource) {\n        this.eventSource.close();\n      }\n\n      if (this.updateConfigurationIntervalId) {\n        clearInterval(this.updateConfigurationIntervalId);\n      }\n\n      // --- Note ---\n      // Same as targeting data interval we don't want to make failed configuration\n      // retrieval recoverable\n      try {\n        this.updateConfigurationIntervalId = setInterval(\n          this.updateClientConfiguration.bind(this),\n          this.settings.updateInterval,\n        );\n      } catch (err) {\n        if (this.updateConfigurationIntervalId) {\n          clearInterval(this.updateConfigurationIntervalId);\n        }\n\n        throw err;\n      }\n    }\n\n    return Ok();\n  }\n\n  public addTargetingData(\n    visitorCode: string,\n    ...data: KameleoonDataType[]\n  ): Result<void, KameleoonError> {\n    if (!(visitorCode in this.targetingData)) {\n      this.targetingData[visitorCode] = [];\n    }\n\n    data.forEach((dataItem) => {\n      // --- Note ---\n      // Previous check excludes the failure possibility\n      (this.targetingData[visitorCode] as TargetingDataItemType[]).push({\n        data: dataItem.data,\n        lastActivityTime: Date.now(),\n      });\n    });\n\n    // --- Note ---\n    // `targetingData` should not refresh `lastUpdate` time\n    const result = this.updateStorageData(this.lastUpdate);\n\n    if (result.ok) {\n      data.forEach((dataItem) => {\n        if (!this.unsentTargetingData[visitorCode]) {\n          this.unsentTargetingData[visitorCode] = [];\n        }\n\n        this.unsentTargetingData[visitorCode].push(dataItem);\n      });\n    }\n\n    return result;\n  }\n\n  public getUnsentData(visitorCode: string): KameleoonDataType[] {\n    const unsentDataItem = this.unsentTargetingData[visitorCode];\n\n    if (!unsentDataItem) {\n      return [];\n    }\n\n    return unsentDataItem;\n  }\n\n  public clearUnsentData(visitorCode: string): void {\n    this.unsentTargetingData[visitorCode] = [];\n  }\n\n  public onConfigurationUpdate(callback: () => void): void {\n    this.configurationUpdateCallback = callback;\n  }\n\n  get storedTargetingData(): TargetingDataType {\n    return this.targetingData;\n  }\n\n  get experiments(): ExperimentItemType[] {\n    return this.configurationData.experiments;\n  }\n\n  get featureFlags(): FeatureFlagType[] {\n    return this.configurationData.featureFlags;\n  }\n\n  get configuration(): ConfigurationType {\n    return this.configurationData.configuration;\n  }\n\n  private checkShouldUpdate(): boolean {\n    const { featureFlags, experiments, configuration } = this.configurationData;\n    const { updateInterval } = this.settings;\n\n    if (!featureFlags.length && !experiments.length) {\n      return true;\n    }\n\n    if (configuration.realTimeUpdate) {\n      return true;\n    }\n\n    const lastUpdateTime = this.lastUpdate.getTime();\n    const updateWindowEdge = Date.now() - updateInterval;\n\n    return lastUpdateTime < updateWindowEdge;\n  }\n\n  private cleanupOutdatedTargetingData(data: TargetingDataType): void {\n    const currentTime = Date.now();\n    const resultTargetingData: TargetingDataType = { ...data };\n\n    for (const [key, value] of Object.entries(resultTargetingData)) {\n      if (value) {\n        const resultValue = value.filter((item) => {\n          const isDataExpired =\n            item.lastActivityTime + SESSION_DURATION < currentTime;\n\n          return isDataExpired;\n        });\n\n        resultTargetingData[key] = resultValue;\n      } else {\n        resultTargetingData[key] = [];\n      }\n    }\n\n    this.targetingData = resultTargetingData;\n    // --- Note ---\n    // `targetingData` should not refresh `lastUpdate` time\n    this.updateStorageData(this.lastUpdate).throw();\n  }\n\n  private readStorageData(): void {\n    const result = this.storage.read();\n\n    if (result.ok) {\n      const { kameleoonTargetingData, kameleoonConfiguration, lastUpdate } =\n        result.data;\n\n      this.configurationData = kameleoonConfiguration;\n      this.targetingData = kameleoonTargetingData;\n      this.lastUpdate = new Date(Date.parse(lastUpdate));\n    }\n  }\n\n  private async updateClientConfiguration(\n    timeStamp?: number,\n  ): Promise<Result<boolean, KameleoonError>> {\n    // --- Note ---\n    // if `externalClientConfiguration` is passed, fetching is disabled and passed config is used instead\n    if (this.externalClientConfiguration) {\n      // --- Note ---\n      // `featureFlags` field is omitted (v1)\n      // instead `featureFlagConfigurations` is used (v2)\n      const { configuration, experiments, featureFlagConfigurations } =\n        this.externalClientConfiguration;\n\n      this.configurationData = {\n        configuration,\n        experiments,\n        featureFlags: featureFlagConfigurations,\n      };\n    } else {\n      const clientConfigurationResult =\n        await this.requester.getClientConfiguration(timeStamp);\n\n      if (!clientConfigurationResult.ok) {\n        return clientConfigurationResult;\n      }\n\n      // --- Note ---\n      // `featureFlags` field is omitted (v1)\n      // instead `featureFlagConfigurations` is used (v2)\n      const { configuration, experiments, featureFlagConfigurations } =\n        clientConfigurationResult.data;\n\n      this.configurationData = {\n        configuration,\n        experiments,\n        featureFlags: featureFlagConfigurations,\n      };\n    }\n\n    const result = this.updateStorageData(new Date());\n\n    if (!result.ok) {\n      return result;\n    }\n\n    return Ok(true);\n  }\n\n  private updateStorageData(lastUpdate: Date): Result<void, KameleoonError> {\n    const data: ClientDataType = {\n      kameleoonTargetingData: this.targetingData,\n      kameleoonConfiguration: this.configurationData,\n      lastUpdate: lastUpdate.toString(),\n    };\n\n    return this.storage.write(data);\n  }\n}\n"],"mappings":"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"}