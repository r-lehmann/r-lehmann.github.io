{"version":3,"file":"types.js","names":["HttpMethod","exports","EVENT_TYPE_KEYS","PARAMETER_KEYS","TRACKING_KEYS","QUERY_KEYS"],"sources":["../../src/requester/types.ts"],"sourcesContent":["import {\n  JSONType,\n  FeatureFlagType,\n  ConfigurationDataType,\n} from '../campaignConfiguration';\nimport { Environment, ExternalPackageInfoType } from '../types';\nimport { Header } from './constants';\n\nexport type RequesterParamsType = {\n  siteCode: string;\n  environment?: Environment;\n  packageInfo: ExternalPackageInfoType;\n  requestDispatcher: IExternalRequestDispatcher;\n};\n\nexport type TrackExperimentParamsType = {\n  body: string;\n  variationId: number;\n  visitorCode: string;\n  experimentId: number;\n  isUnallocated: boolean;\n  userAgent?: string;\n  callback?: () => void;\n};\n\nexport type TrackDataParamsType = {\n  visitorCode: string;\n  body: string;\n  userAgent?: string;\n};\n\nexport type GetClientConfigurationResultType = Omit<\n  ConfigurationDataType,\n  'featureFlags'\n> & { featureFlagConfigurations: FeatureFlagType[] };\n\nexport enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n}\n\nconst EVENT_TYPE_KEYS = [\n  'customData',\n  'staticData',\n  'page',\n  'conversion',\n  'activity',\n  'experiment',\n] as const;\nconst PARAMETER_KEYS = [\n  'valuesCountMap',\n  'id',\n  'nonce',\n  'sdkName',\n  'sdkVersion',\n  'browserIndex',\n  'siteCode',\n  'environment',\n  'visitorCode',\n  'negative',\n  'revenue',\n  'title',\n  'referrersIndices',\n  'overwrite',\n  'index',\n  'href',\n  'variationId',\n  'deviceType',\n  'goalId',\n  'ts',\n  'key',\n] as const;\nconst TRACKING_KEYS = ['visit', 'map'] as const;\nconst QUERY_KEYS = ['sse', 'mobile', 'map', 'events'] as const;\n\nexport type TrackingType = Record<\n  Capitalize<(typeof TRACKING_KEYS)[number]>,\n  string\n>;\nexport type QueryType = Record<Capitalize<(typeof QUERY_KEYS)[number]>, string>;\nexport type ParameterType = Record<\n  Capitalize<(typeof PARAMETER_KEYS)[number]>,\n  string\n>;\nexport type EventType = Record<\n  Capitalize<(typeof EVENT_TYPE_KEYS)[number]>,\n  string\n>;\n\nexport type StrictTrackingRecord<T> = {\n  [K in keyof T]: K extends string ? `${Uncapitalize<K>}/` : never;\n};\nexport type StrictQueryRecord<T> = {\n  [K in keyof T]: K extends string ? `${Uncapitalize<K>}?siteCode=` : never;\n};\nexport type StrictEventTypeRecord<T> = {\n  [K in keyof T]: K extends string ? `eventType=${Uncapitalize<K>}` : never;\n};\nexport type StrictParameterRecord<T> = {\n  [K in keyof T]: K extends string ? `&${Uncapitalize<K>}=` : never;\n};\n\nexport type TrackParametersType = {\n  url: string;\n  headers?: Partial<Record<Header, string>>;\n  body: string;\n};\n\n/**\n * @interface an interface of External Request Dispatcher which will be used to perform requests.\n * */\nexport interface IExternalRequestDispatcher {\n  /**\n   * @method track - send a track request\n   * @param {TrackParametersType} parameters - track parameters\n   * */\n  track: (params: TrackParametersType) => Promise<boolean>;\n  /**\n   * @method getClientConfiguration - get client configuration\n   * @param {string} url - url address\n   * */\n  getClientConfiguration: (url: string) => Promise<JSONType>;\n  /**\n   * @method getRemoteData - get data from remote server of Kameleoon\n   * @param {string} url - url address\n   * */\n  getRemoteData: (url: string) => Promise<JSONType>;\n}\n"],"mappings":";;;;;;IAoCYA,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAAC,OAAA,CAAAD,UAAA,GAAAA,UAAA;AAKtB,MAAME,eAAe,GAAG,CACtB,YAAY,EACZ,YAAY,EACZ,MAAM,EACN,YAAY,EACZ,UAAU,EACV,YAAY,CACJ;AACV,MAAMC,cAAc,GAAG,CACrB,gBAAgB,EAChB,IAAI,EACJ,OAAO,EACP,SAAS,EACT,YAAY,EACZ,cAAc,EACd,UAAU,EACV,aAAa,EACb,aAAa,EACb,UAAU,EACV,SAAS,EACT,OAAO,EACP,kBAAkB,EAClB,WAAW,EACX,OAAO,EACP,MAAM,EACN,aAAa,EACb,YAAY,EACZ,QAAQ,EACR,IAAI,EACJ,KAAK,CACG;AACV,MAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,KAAK,CAAU;AAC/C,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAU"}