"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExternalEventSource = void 0;
var _requester = require("../requester");
var _constants = require("../requester/constants");
var _constants2 = require("./constants");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ExternalEventSource {
  constructor(siteCode, externalEventSource) {
    _defineProperty(this, "eventSource", void 0);
    _defineProperty(this, "siteCode", void 0);
    const url = _requester.URL.EVENTS + _constants.UrlQuery.Sse + siteCode;
    const eventSource = externalEventSource.initialize(url);
    this.eventSource = eventSource;
    this.siteCode = siteCode;
  }
  open(onEvent) {
    this.eventSource.open({
      onEvent,
      siteCode: this.siteCode,
      eventType: _constants2.REAL_TIME_EVENT
    });
  }
  close() {
    this.eventSource.close();
  }
}
exports.ExternalEventSource = ExternalEventSource;
//# sourceMappingURL=externalEventSource.js.map